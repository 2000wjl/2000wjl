<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Frp服务开机自启</title>
    <url>/2021/04/12/Frp%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</url>
    <content><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="创建服务文件"><a href="#创建服务文件" class="headerlink" title="创建服务文件"></a>创建服务文件</h2><p><code>sudo vim /etc/systemd/system/frps.service</code></p>
<h2 id="填入如下信息"><a href="#填入如下信息" class="headerlink" title="填入如下信息"></a>填入如下信息</h2><p>ExecStart请自行替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Server</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/frp/frps_linux_arm -c /usr/<span class="built_in">local</span>/frp/frps.ini  <span class="comment">#目标文件</span></span><br><span class="line"><span class="comment">#FRPC--ExecStart=/usr/local/frp/frpc_linux_arm -c /usr/local/frp/frpc.ini </span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>



<p>使用方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#刷新服务列表：</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frps</span><br><span class="line"><span class="comment">#关闭开机自启</span></span><br><span class="line">systemctl <span class="built_in">disable</span> frps</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start frps</span><br><span class="line"><span class="comment">#停止服务</span></span><br><span class="line">systemctl stop frps</span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">systemctl restart frps</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>实用</category>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse快捷键</title>
    <url>/2020/09/08/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<ol>
<li>Alt+&#x2F;    自动补全</li>
<li>Ctrl+&#x2F;    注释</li>
<li>syso+自动补全    system.out.println(“”);</li>
<li>Alt+Shift+R     批量改名(参数、变量、常量)</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
        <category>Java</category>
        <category>Eclipse技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA的模板注释</title>
    <url>/2021/12/23/IDEA%E7%9A%84%E6%A8%A1%E6%9D%BF%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h1 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h1><blockquote>
<p>可参照说明自行修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 你的名字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: $&#123;YEAR&#125;/$&#123;MONTH&#125;/$&#123;DAY&#125;/$&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p><code>File---&gt;Settings----&gt;Editor----&gt;File and Code Templates ---&gt;Includes---&gt;File Header</code></p>
<p><code>applay</code></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/https/img-blog.csdnimg.cn/da57d29c808246d3a1a072b6fef7da0d.png?x-oss-process=image/2021/12/23/19-10-03-821e15d2bfd8cd9b2db0d0813022e796-da57d29c808246d3a1a072b6fef7da0d-cf3b75.png"
                      alt="img"
                ></p>
<blockquote>
<p>效果<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/https/img-blog.csdnimg.cn/ca09165df90d413fb1880a758bbc0658.png?x-oss-process=image/2021/12/23/19-10-13-8fd72aef1aa43a9ffbc8f74b494b70ad-ca09165df90d413fb1880a758bbc0658-323c08.png"
                      alt="img"
                ></p>
</blockquote>
<h1 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h1><blockquote>
<p>自己改，前面没’&#x2F;**’，不要自作聪明</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line">* @Description: $description$</span><br><span class="line">* @Param: $params$</span><br><span class="line">* @return: $returns$</span><br><span class="line">* @Author: 你的名字</span><br><span class="line">* @Date: $date$</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/https/img-blog.csdnimg.cn/20190919101418507.png?x-oss-process=image/2021/12/23/19-13-29-d57a9600c2ece2f2a07eb95008e2263d-20190919101418507-abe9c1.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/https/img-blog.csdnimg.cn/20190919101554492.png?x-oss-process=image/2021/12/23/19-13-35-feec4991acace3937be182e2e43f65fb-20190919101554492-bb131f.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/https/img-blog.csdnimg.cn/20200917115631555.png?x-oss-process=image/2021/12/23/19-13-45-cad90e004adfcd9473fd915fd7c90c2a-20200917115631555-7c7c12.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/https/img-blog.csdnimg.cn/89fc8772694d49ea9bd889b7d168f464.png?x-oss-process=image/2021/12/23/19-14-11-ce8554d81f3d0349b9650379cee94bb9-89fc8772694d49ea9bd889b7d168f464-037a40.png"
                      alt="img"
                ></p>
<h2 id="为你的模板设置默认值：点击那个Edit-variables"><a href="#为你的模板设置默认值：点击那个Edit-variables" class="headerlink" title="为你的模板设置默认值：点击那个Edit variables"></a>为你的模板设置默认值：点击那个Edit variables</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/https/img-blog.csdnimg.cn/20190920113021835.png?x-oss-process=image/2021/12/23/19-14-19-92d42e1cd5bbb74c9f907c5dc03589fa-20190920113021835-6e94db.png"
                      alt="img"
                ></p>
<p><em><em>保存后，先按一个&#x2F; * ，紧跟着按Tab键 ，注释就出来了。当然，这个</em> 你可以随便写，最后注释快捷键就是 （&#x2F;  你自定义按键 + Tab）</em>*</p>
<blockquote>
<p>效果<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/https/img-blog.csdnimg.cn/3b9b9c2839ed44198828b19bff799eae.png?x-oss-process=image/2021/12/23/19-14-27-54cbf950a3d531440ecbd272b3d87ff4-3b9b9c2839ed44198828b19bff799eae-28fa47.png"
                      alt="img"
                ></p>
</blockquote>
<hr>
<p>有小伙伴说注释按下后没出来。没出来的话是不是你操作到方法注释保存时这里有个警示呢？</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/https/img-blog.csdnimg.cn/20200917120528517.png?x-oss-process=image/2021/12/23/19-14-33-f16b8391f6880cd58e198cd50783e608-20200917120528517-a6b6d2.png"
                      alt="img"
                ></p>
]]></content>
      <categories>
        <category>折腾</category>
        <category>实用</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2021/05/14/Git/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/02/git-process.png"
                      alt="Git工作流程"
                ></p>
<h1 id="Git-工作区、暂存区和版本库"><a href="#Git-工作区、暂存区和版本库" class="headerlink" title="Git 工作区、暂存区和版本库"></a>Git 工作区、暂存区和版本库</h1><hr>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>我们先来理解下 Git 工作区、暂存区和版本库概念：</p>
<ul>
<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>
<li><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li>
</ul>
<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg"
                      alt="img"
                ></p>
<ul>
<li>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage&#x2F;index），标记为 “master” 的是 master 分支所代表的目录树。</li>
<li>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</li>
<li>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git&#x2F;objects” 目录下，里面包含了创建的各种对象及内容。</li>
<li>当对工作区修改（或新增）的文件执行 <strong>git add</strong> 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</li>
<li>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</li>
<li>当执行 <strong>git reset HEAD</strong> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</li>
<li>当执行 <strong>git rm –cached <file></strong> 命令时，会直接从暂存区删除文件，工作区则不做出改变。</li>
<li>当执行 <strong>git checkout .</strong> 或者 <strong>git checkout – <file></strong> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</li>
<li>当执行 <strong>git checkout HEAD .</strong> 或者 <strong>git checkout HEAD <file></strong> 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</li>
</ul>
<h1 id="Git-创建仓库"><a href="#Git-创建仓库" class="headerlink" title="Git 创建仓库"></a>Git 创建仓库</h1><p>本章节我们将为大家介绍如何创建一个 Git 仓库。</p>
<p>你可以使用一个已经存在的目录作为Git仓库。</p>
<hr>
<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p>
<p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用当前目录作为Git仓库，我们只需使它初始化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>该命令执行完后会在当前目录生成一个 .git 目录。</p>
<p>使用我们指定目录作为Git仓库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init newrepo</span><br></pre></td></tr></table></figure>

<p>初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m &#x27;初始化项目版本&#x27;</span><br></pre></td></tr></table></figure>

<p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p>
<blockquote>
<p><strong>注：</strong> 在 Linux 系统中，commit 信息使用单引号 **’**，Windows 系统，commit 信息使用双引号 **”**。</p>
<p>所以在 git bash 中 <strong>git commit -m ‘提交说明’</strong> 这样是可以的，在 Windows 命令行中就要使用双引号 **git commit -m “提交说明”**。</p>
</blockquote>
<hr>
<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目（类似 <strong>svn checkout</strong>）。</p>
<p>克隆仓库的命令格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;repo&gt;</span><br></pre></td></tr></table></figure>

<p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>**repo:**Git 仓库。</li>
<li>**directory:**本地目录。</li>
</ul>
<p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git://github.com/schacon/grit.git</span><br></pre></td></tr></table></figure>

<p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</p>
<p>如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git://github.com/schacon/grit.git mygrit</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>git 的设置使用 <strong>git config</strong> 命令。</p>
<p>显示当前的 git 配置信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">credential.helper=osxkeychain</span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=true</span><br><span class="line">core.bare=false</span><br><span class="line">core.logallrefupdates=true</span><br><span class="line">core.ignorecase=true</span><br><span class="line">core.precomposeunicode=true</span><br></pre></td></tr></table></figure>

<p>编辑 git 配置文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config -e    # 针对当前仓库 </span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config -e --global   # 针对系统上所有仓库</span><br></pre></td></tr></table></figure>

<p>设置提交代码时的用户信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;runoob&quot;</span><br><span class="line">$ git config --global user.email test@runoob.com</span><br></pre></td></tr></table></figure>

<p>如果去掉 <strong>–global</strong> 参数只对当前仓库有效。</p>
<h1 id="Git-基本操作"><a href="#Git-基本操作" class="headerlink" title="Git 基本操作"></a>Git 基本操作</h1><p>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。</p>
<p>本章将对有关创建与提交你的项目快照的命令作介绍。</p>
<p>Git 常用的是以下 6 个命令：<strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong>，后面我们会详细介绍。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/02/git-command.jpg"
                      alt="img"
                ></p>
<p><strong>说明：</strong></p>
<ul>
<li>workspace：工作区</li>
<li>staging area：暂存区&#x2F;缓存区</li>
<li>local repository：版本库或本地仓库</li>
<li>remote repository：远程仓库</li>
</ul>
<p>一个简单的操作步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init    </span><br><span class="line">$ git add .    </span><br><span class="line">$ git commit  </span><br></pre></td></tr></table></figure>

<ul>
<li>git init - 初始化仓库。</li>
<li>git add . - 添加文件到暂存区。</li>
<li>git commit - 将暂存区内容添加到仓库中。</li>
</ul>
<h3 id="创建仓库命令"><a href="#创建仓库命令" class="headerlink" title="创建仓库命令"></a>创建仓库命令</h3><p>下表列出了 git 创建仓库的命令：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git init</code></td>
<td align="left">初始化仓库</td>
</tr>
<tr>
<td align="left"><code>git clone</code></td>
<td align="left">拷贝一份远程仓库，也就是下载一个项目。</td>
</tr>
</tbody></table>
<hr>
<h2 id="提交与修改"><a href="#提交与修改" class="headerlink" title="提交与修改"></a>提交与修改</h2><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p>
<p>下表列出了有关创建与提交你的项目的快照的命令：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git add</code></td>
<td align="left">添加文件到仓库</td>
</tr>
<tr>
<td align="left"><code>git status</code></td>
<td align="left">查看仓库当前的状态，显示有变更的文件。</td>
</tr>
<tr>
<td align="left"><code>git diff</code></td>
<td align="left">比较文件的不同，即暂存区和工作区的差异。</td>
</tr>
<tr>
<td align="left"><code>git commit</code></td>
<td align="left">提交暂存区到本地仓库。</td>
</tr>
<tr>
<td align="left"><code>git reset</code></td>
<td align="left">回退版本。</td>
</tr>
<tr>
<td align="left"><code>git rm</code></td>
<td align="left">删除工作区文件。</td>
</tr>
<tr>
<td align="left"><code>git mv</code></td>
<td align="left">移动或重命名工作区文件。</td>
</tr>
</tbody></table>
<h3 id="提交日志"><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git log</code></td>
<td align="left">查看历史提交记录</td>
</tr>
<tr>
<td align="left"><code>git blame &lt;file&gt;</code></td>
<td align="left">以列表形式查看指定文件的历史修改记录</td>
</tr>
</tbody></table>
<h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git remote</code></td>
<td align="left">远程仓库操作</td>
</tr>
<tr>
<td align="left"><code>git fetch</code></td>
<td align="left">从远程获取代码库</td>
</tr>
<tr>
<td align="left"><code>git pull</code></td>
<td align="left">下载远程代码并合并</td>
</tr>
<tr>
<td align="left"><code>git push</code></td>
<td align="left">上传远程代码并合并</td>
</tr>
</tbody></table>
<h1 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h1><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>
<p>有人把 Git 的分支模型称为<strong>必杀技特性</strong>，而正是因为它，将 <strong>Git</strong> 从版本控制系统家族里区分出来。</p>
<p>创建分支命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch (branchname)</span><br></pre></td></tr></table></figure>

<p>切换分支命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout (branchname)</span><br></pre></td></tr></table></figure>

<p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p>
<p>合并分支命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge </span><br></pre></td></tr></table></figure>

<p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p>
<p>开始前我们先创建一个测试目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir gitdemo</span><br><span class="line">$ cd gitdemo/</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository...</span><br><span class="line">$ touch README</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m &#x27;第一次版本提交&#x27;</span><br><span class="line">[master (root-commit) 3b58100] 第一次版本提交</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 README</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Git-分支管理-1"><a href="#Git-分支管理-1" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><h3 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h3><p>列出分支基本命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>没有参数时，<strong>git branch</strong> 会列出你在本地的分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<p>此例的意思就是，我们有一个叫做 <strong>master</strong> 的分支，并且该分支是当前分支。</p>
<p>当你执行 <strong>git init</strong> 的时候，默认情况下 Git 就会为你创建 <strong>master</strong> 分支。</p>
<p>如果我们要手动创建一个分支。执行 <strong>git branch (branchname)</strong> 即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch testing</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure>

<p>现在我们可以看到，有了一个新分支 <strong>testing</strong>。</p>
<p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 <strong>testing</strong> 分支，Git 将还原你的工作目录到你创建分支时候的样子。</p>
<p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">README</span><br><span class="line">$ echo &#x27;runoob.com&#x27; &gt; test.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#x27;add test.txt&#x27;</span><br><span class="line">[master 3e92c19] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br><span class="line">$ git checkout testing</span><br><span class="line">Switched to branch &#x27;testing&#x27;</span><br><span class="line">$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure>

<p>当我们切换到 <strong>testing</strong> 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 <strong>master</strong> 分支的时候，它们有重新出现了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br></pre></td></tr></table></figure>

<p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -b newtest</span><br><span class="line">Switched to a new branch &#x27;newtest&#x27;</span><br><span class="line">$ git rm test.txt </span><br><span class="line">rm &#x27;test.txt&#x27;</span><br><span class="line">$ ls</span><br><span class="line">README</span><br><span class="line">$ touch runoob.php</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -am &#x27;removed test.txt、add runoob.php&#x27;</span><br><span class="line">[newtest c1501a2] removed test.txt、add runoob.php</span><br><span class="line"> 2 files changed, 1 deletion(-)</span><br><span class="line"> create mode 100644 runoob.php</span><br><span class="line"> delete mode 100644 test.txt</span><br><span class="line">$ ls</span><br><span class="line">README        runoob.php</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br></pre></td></tr></table></figure>

<p>如你所见，我们创建了一个分支，在该分支的上移除了一些文件 test.txt，并添加了 runoob.php 文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 runoob.php 不存在主分支中。</p>
<p>使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。</p>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>删除分支命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure>

<p>例如我们要删除 testing 分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br><span class="line">$ git branch -d testing</span><br><span class="line">Deleted branch testing (was 85fc7e7).</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  newtest</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br><span class="line">$ git merge newtest</span><br><span class="line">Updating 3e92c19..c1501a2</span><br><span class="line">Fast-forward</span><br><span class="line"> runoob.php | 0</span><br><span class="line"> test.txt   | 1 -</span><br><span class="line"> 2 files changed, 1 deletion(-)</span><br><span class="line"> create mode 100644 runoob.php</span><br><span class="line"> delete mode 100644 test.txt</span><br><span class="line">$ ls</span><br><span class="line">README        runoob.php</span><br></pre></td></tr></table></figure>

<p>以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。</p>
<p>合并完后就可以删除分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -d newtest</span><br><span class="line">Deleted branch newtest (was c1501a2).</span><br></pre></td></tr></table></figure>

<p>删除后， 就只剩下 master 分支了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">$ cat runoob.php</span><br></pre></td></tr></table></figure>

<p>首先，我们创建一个叫做 change_site 的分支，切换过去，我们将 runoob.php 内容改为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>创建 change_site 分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -b change_site</span><br><span class="line">Switched to a new branch &#x27;change_site&#x27;</span><br><span class="line">$ vim runoob.php</span><br><span class="line">$ head -3 runoob.php</span><br><span class="line">&lt;?php</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line">$ git commit -am &#x27;changed the runoob.php&#x27;</span><br><span class="line">[change_site 7774248] changed the runoob.php</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>将修改的内容提交到 change_site 分支中。 现在，假如切换回 master 分支我们可以看内容恢复到我们修改前的(空文件，没有代码)，我们再次修改 runoob.php 文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">$ cat runoob.php</span><br><span class="line">$ vim runoob.php    # 修改内容如下</span><br><span class="line">$ cat runoob.php</span><br><span class="line">&lt;?php</span><br><span class="line">echo 1;</span><br><span class="line">?&gt;</span><br><span class="line">$ git diff</span><br><span class="line">diff --git a/runoob.php b/runoob.php</span><br><span class="line">index e69de29..ac60739 100644</span><br><span class="line">--- a/runoob.php</span><br><span class="line">+++ b/runoob.php</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+&lt;?php</span><br><span class="line">+echo 1;</span><br><span class="line">+?&gt;</span><br><span class="line">$ git commit -am &#x27;修改代码&#x27;</span><br><span class="line">[master c68142b] 修改代码</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br></pre></td></tr></table></figure>

<p>现在这些改变已经记录到我的 “master” 分支了。接下来我们将 “change_site” 分支合并过来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge change_site</span><br><span class="line">Auto-merging runoob.php</span><br><span class="line">CONFLICT (content): Merge conflict in runoob.php</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line"></span><br><span class="line">$ cat runoob.php     # 代开文件，看到冲突内容</span><br><span class="line">&lt;?php</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">echo 1;</span><br><span class="line">=======</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>我们将前一个分支合并到 master 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim runoob.php </span><br><span class="line">$ cat runoob.php</span><br><span class="line">&lt;?php</span><br><span class="line">echo 1;</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line">$ git diff</span><br><span class="line">diff --cc runoob.php</span><br><span class="line">index ac60739,b63d7d7..0000000</span><br><span class="line">--- a/runoob.php</span><br><span class="line">+++ b/runoob.php</span><br><span class="line">@@@ -1,3 -1,3 +1,4 @@@</span><br><span class="line">  &lt;?php</span><br><span class="line"> +echo 1;</span><br><span class="line">+ echo &#x27;runoob&#x27;;</span><br><span class="line">  ?&gt;</span><br></pre></td></tr></table></figure>

<p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">UU runoob.php</span><br><span class="line">$ git add runoob.php</span><br><span class="line">$ git status -s</span><br><span class="line">M  runoob.php</span><br><span class="line">$ git commit</span><br><span class="line">[master 88afe0e] Merge branch &#x27;change_site&#x27;</span><br></pre></td></tr></table></figure>

<p>现在我们成功解决了合并中的冲突，并提交了结果。</p>
<h1 id="Git-查看提交历史"><a href="#Git-查看提交历史" class="headerlink" title="Git 查看提交历史"></a>Git 查看提交历史</h1><p>Git 提交历史一般常用两个命令：</p>
<ul>
<li><p><strong>git log</strong> - 查看历史提交记录。</p>
</li>
<li><p><strong>git blame <file></strong> - 以列表形式查看指定文件的历史修改记录。</p>
</li>
<li><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3></li>
<li><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 <strong>git log</strong> 命令查看。</p>
</li>
<li><p>针对我们前一章节的操作，使用 <strong>git log</strong> 命令列出历史提交记录如下：</p>
</li>
<li><pre><code>$ git log
commit d5e9fc2c811e0ca2b2d28506ef7dc14171a207d9 (HEAD -&gt; master)
Merge: c68142b 7774248
Author: runoob &lt;test@runoob.com&gt;
Date:   Fri May 3 15:55:58 2019 +0800

    Merge branch &#39;change_site&#39;

commit c68142b562c260c3071754623b08e2657b4c6d5b
Author: runoob &lt;test@runoob.com&gt;
Date:   Fri May 3 15:52:12 2019 +0800

    修改代码

commit 777424832e714cf65d3be79b50a4717aea51ab69 (change_site)
Author: runoob &lt;test@runoob.com&gt;
Date:   Fri May 3 15:49:26 2019 +0800

    changed the runoob.php

commit c1501a244676ff55e7cccac1ecac0e18cbf6cb00
Author: runoob &lt;test@runoob.com&gt;
Date:   Fri May 3 15:35:32 2019 +0800
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 我们可以用 --oneline 选项来查看历史记录的简洁的版本。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  $ git log --oneline</span><br><span class="line">  $ git log --oneline</span><br><span class="line">  d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">  c68142b 修改代码</span><br><span class="line">  7774248 (change_site) changed the runoob.php</span><br><span class="line">  c1501a2 removed test.txt、add runoob.php</span><br><span class="line">  3e92c19 add test.txt</span><br><span class="line">  3b58100 第一次版本提交</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>这告诉我们的是，此项目的开发历史。</p>
</li>
<li><p>我们还可以用 –graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：</p>
</li>
<li><pre><code>*   d5e9fc2 (HEAD -&gt; master) Merge branch &#39;change_site&#39;
|\  
| * 7774248 (change_site) changed the runoob.php
* | c68142b 修改代码
|/  
* c1501a2 removed test.txt、add runoob.php
* 3e92c19 add test.txt
* 3b58100 第一次版本提交
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 现在我们可以更清楚明了地看到何时工作分叉、又何时归并。</span><br><span class="line"></span><br><span class="line">- 你也可以用 **--reverse** 参数来逆向显示所有日志。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  $ git log --reverse --oneline</span><br><span class="line">  3b58100 第一次版本提交</span><br><span class="line">  3e92c19 add test.txt</span><br><span class="line">  c1501a2 removed test.txt、add runoob.php</span><br><span class="line">  7774248 (change_site) changed the runoob.php</span><br><span class="line">  c68142b 修改代码</span><br><span class="line">  d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>如果只想查找指定用户的提交日志可以使用命令：git log –author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：</p>
</li>
<li><pre><code>$ git log --author=Linus --oneline -5
81b50f3 Move &#39;builtin-*&#39; into a &#39;builtin/&#39; subdirectory
3bb7256 make &quot;index-pack&quot; a built-in
377d027 make &quot;git pack-redundant&quot; a built-in
b532581 make &quot;git unpack-file&quot; a built-in
112dd51 make &quot;mktag&quot; a built-in
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 如果你要指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after。</span><br><span class="line"></span><br><span class="line">- 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）：</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  $ git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges</span><br><span class="line">  5469e2d Git 1.7.1-rc2</span><br><span class="line">  d43427d Documentation/remote-helpers: Fix typos and improve language</span><br><span class="line">  272a36b Fixup: Second argument may be any arbitrary string</span><br><span class="line">  b6c8d2d Documentation/remote-helpers: Add invocation section</span><br><span class="line">  5ce4f4e Documentation/urls: Rewrite to accomodate transport::address</span><br><span class="line">  00b84e9 Documentation/remote-helpers: Rewrite description</span><br><span class="line">  03aa87e Documentation: Describe other situations where -z affects git diff</span><br><span class="line">  77bc694 rebase-interactive: silence warning when no commits rewritten</span><br><span class="line">  636db2c t3301: add tests to use --format=&quot;%N&quot;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>更多 git log 命令可查看：<a class="link"   href="http://git-scm.com/docs/git-log" >http://git-scm.com/docs/git-log<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><h3 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h3></li>
<li><p>如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：</p>
</li>
<li><p>&#96;&#96;&#96;<br>git blame <file></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- git blame 命令是以列表形式显示修改记录，如下实例：</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  $ git blame README </span><br><span class="line">  ^d2097aa (tianqixin 2020-08-25 14:59:25 +0800 1) # Runoob Git 测试</span><br><span class="line">  db9315b0 (runoob    2020-08-25 16:00:23 +0800 2) # 菜鸟教程 </span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h1><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p>
<p>比如说，我们想为我们的 runoob 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p>
<p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -a v1.0 </span><br></pre></td></tr></table></figure>

<p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p>
<p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">|\  </span><br><span class="line">| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">* | c68142b 修改代码</span><br><span class="line">|/  </span><br><span class="line">* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">* 3e92c19 add test.txt</span><br><span class="line">* 3b58100 第一次版本提交</span><br></pre></td></tr></table></figure>

<p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p>
<p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -a v0.9 85fc7e7</span><br><span class="line">$ git log --oneline --decorate --graph</span><br><span class="line">*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">|\  </span><br><span class="line">| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">* | c68142b 修改代码</span><br><span class="line">|/  </span><br><span class="line">* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">* 3e92c19 add test.txt</span><br><span class="line">* 3b58100 (tag: v0.9) 第一次版本提交</span><br></pre></td></tr></table></figure>

<p>如果我们要查看所有标签可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure>

<p>指定标签信息命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure>

<p>PGP签名标签命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure>

<h1 id="Git-远程仓库-Github"><a href="#Git-远程仓库-Github" class="headerlink" title="Git 远程仓库(Github)"></a>Git 远程仓库(Github)</h1><p>Git 并不像 SVN 那样有个中心服务器。</p>
<p>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</p>
<p>本例使用了 Github 作为远程仓库，你可以先阅读我们的 <a class="link"   href="https://www.runoob.com/w3cnote/git-guide.html" >Github 简明教程。<i class="fas fa-external-link-alt"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg"
                      alt="img"
                ></p>
<hr>
<h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>

<p>本例以 Github 为例作为远程仓库，如果你没有 Github 可以在官网 <a class="link"   href="https://github.com/%E6%B3%A8%E5%86%8C%E3%80%82" >https://github.com/注册。<i class="fas fa-external-link-alt"></i></a></p>
<p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p>
<p>使用以下命令生成 SSH Key：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>后面的 <strong><a class="link"   href="mailto:&#x79;&#x6f;&#x75;&#x72;&#95;&#101;&#109;&#x61;&#105;&#108;&#64;&#121;&#x6f;&#x75;&#x72;&#x65;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;" >&#x79;&#x6f;&#x75;&#x72;&#95;&#101;&#109;&#x61;&#105;&#108;&#64;&#121;&#x6f;&#x75;&#x72;&#x65;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;<i class="fas fa-external-link-alt"></i></a></strong> 改为你在 Github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。</p>
<p>成功的话会在 <strong>~&#x2F;</strong> 下生成 <strong>.ssh</strong> 文件夹，进去，打开 <strong>id_rsa.pub</strong>，复制里面的 <strong>key</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;429240967@qq.com&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/tianqixin/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase):    # 直接回车</span><br><span class="line">Enter same passphrase again:                   # 直接回车</span><br><span class="line">Your identification has been saved in /Users/tianqixin/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/tianqixin/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:MDKVidPTDXIQoJwoqUmI4LBAsg5XByBlrOEzkxrwARI 429240967@qq.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|E*+.+=**oo       |</span><br><span class="line">|%Oo+oo=o. .      |</span><br><span class="line">|%**.o.o.         |</span><br><span class="line">|OO.  o o         |</span><br><span class="line">|+o+     S        |</span><br><span class="line">|.                |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>

<p>回到 github 上，进入 Account &#x3D;&gt; Settings（账户配置）。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/48840BF0-992F-4CCC-A388-15CB74819D88.jpg"
                      alt="img"
                ></p>
<p>左边选择 <strong>SSH and GPG keys</strong>，然后点击 <strong>New SSH key</strong> 按钮,title 设置标题，可以随便填，粘贴在你电脑上生成的 key。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/B0589847-A498-4415-8700-252BDE1B20C0.jpg"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/106AD534-A38A-47F3-88A3-B7BE3F2FEEF1.jpg"
                      alt="img"
                ></p>
<p>添加成功后界面如下所示</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/EC8F8872-091A-4CAB-90F2-616F34F350A9.jpg"
                      alt="img"
                ></p>
<p>为了验证是否成功，输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host &#x27;github.com (52.74.223.119)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes                   # 输入 yes</span><br><span class="line">Warning: Permanently added &#x27;github.com,52.74.223.119&#x27; (RSA) to the list of known hosts.</span><br><span class="line">Hi tianqixin! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. # 成功信息</span><br></pre></td></tr></table></figure>

<p>以下命令说明我们已成功连上 Github。</p>
<p>之后登录后点击” New repository “ 如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/github1.jpg"
                      alt="img"
                ></p>
<p>之后在在Repository name 填入 runoob-git-test(远程仓库名) ，其他保持默认设置，点击”Create repository”按钮，就成功地创建了一个新的Git仓库：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/299CF000-7B6E-4BEC-B8C2-D9AEB053307B.jpg"
                      alt="img"
                ></p>
<p>创建成功后，显示如下信息：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/1BCB4379-1A25-4C77-BB82-92B3E7185435.jpg"
                      alt="img"
                ></p>
<p>以上信息告诉我们可以从这个仓库克隆出新的仓库，也可以把本地仓库的内容推送到GitHub仓库。</p>
<p>现在，我们根据 GitHub 的提示，在本地的仓库下运行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir runoob-git-test                     # 创建测试目录</span><br><span class="line">$ cd runoob-git-test/                       # 进入测试目录</span><br><span class="line">$ echo &quot;# 菜鸟教程 Git 测试&quot; &gt;&gt; README.md     # 创建 README.md 文件并写入内容</span><br><span class="line">$ ls                                        # 查看目录下的文件</span><br><span class="line">README</span><br><span class="line">$ git init                                  # 初始化</span><br><span class="line">$ git add README.md                         # 添加文件</span><br><span class="line">$ git commit -m &quot;添加 README.md 文件&quot;        # 提交并备注信息</span><br><span class="line">[master (root-commit) 0205aab] 添加 README.md 文件</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line"></span><br><span class="line"># 提交到 Github</span><br><span class="line">$ git remote add origin git@github.com:tianqixin/runoob-git-test.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>以下命令请根据你在Github成功创建新仓库的地方复制，而不是根据我提供的命令，因为我们的Github用户名不一样，仓库名也不一样。</p>
<p>接下来我们返回 Github 创建的仓库，就可以看到文件已上传到 Github上：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/53CA927D-F36F-4A00-AFB2-5EAED05B535E.jpg"
                      alt="img"
                ></p>
<hr>
<h2 id="查看当前的远程库"><a href="#查看当前的远程库" class="headerlink" title="查看当前的远程库"></a>查看当前的远程库</h2><p>要查看当前配置有哪些远程仓库，可以用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote -v</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (push)</span><br></pre></td></tr></table></figure>

<p>执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。</p>
<hr>
<h2 id="提取远程仓库"><a href="#提取远程仓库" class="headerlink" title="提取远程仓库"></a>提取远程仓库</h2><p>Git 有两个命令用来提取远程仓库的更新。</p>
<p>1、从远程仓库下载新分支与数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure>

<p>该命令执行完后需要执行 git merge 远程分支到你所在的分支。</p>
<p>2、从远端仓库提取数据并尝试合并到当前分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure>

<p>该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。</p>
<p>假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 <strong>git fetch [alias]</strong> 告诉 Git 去获取它有你没有的数据，然后你可以执行 <strong>git merge [alias]&#x2F;[branch]</strong> 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。</p>
<p>接下来我们在 Github 上点击” README.md” 并在线修改它:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/C5A6670F-202D-4F2C-8A63-07CEA37BB67A.jpg"
                      alt="img"
                ></p>
<p>然后我们在本地更新修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From github.com:tianqixin/runoob-git-test</span><br><span class="line">   0205aab..febd8ed  master     -&gt; origin/master</span><br></pre></td></tr></table></figure>

<p>以上信息”0205aab..febd8ed master -&gt; origin&#x2F;master” 说明 master 分支已被更新，我们可以使用以下命令将更新同步到本地：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge origin/master</span><br><span class="line">Updating 0205aab..febd8ed</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<p>查看 README.md 文件内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat README.md </span><br><span class="line"># 菜鸟教程 Git 测试</span><br><span class="line">## 第一次修改内容</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>推送你的新分支与数据到某个远端仓库命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [alias] [branch]</span><br></pre></td></tr></table></figure>

<p>以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支，实例如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch runoob-test.txt      # 添加文件</span><br><span class="line">$ git add runoob-test.txt </span><br><span class="line">$ git commit -m &quot;添加到远程&quot;</span><br><span class="line">master 69e702d] 添加到远程</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 runoob-test.txt</span><br><span class="line"></span><br><span class="line">$ git push origin master    # 推送到 Github</span><br></pre></td></tr></table></figure>

<p>重新回到我们的 Github 仓库，可以看到文件已经提交上来了：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/03/79A84530-7DC0-4D25-9F83-8776433A4C32.jpg"
                      alt="img"
                ></p>
<hr>
<h2 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h2><p>删除远程仓库你可以使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm [别名]</span><br></pre></td></tr></table></figure>

<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (push)</span><br><span class="line"></span><br><span class="line"># 添加仓库 origin2</span><br><span class="line">$ git remote add origin2 git@github.com:tianqixin/runoob-git-test.git</span><br><span class="line"></span><br><span class="line">$ git remote -v</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (push)</span><br><span class="line">origin2    git@github.com:tianqixin/runoob-git-test.git (fetch)</span><br><span class="line">origin2    git@github.com:tianqixin/runoob-git-test.git (push)</span><br><span class="line"></span><br><span class="line"># 删除仓库 origin2</span><br><span class="line">$ git remote rm origin2</span><br><span class="line">$ git remote -v</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (push)</span><br></pre></td></tr></table></figure>

<h1 id="Git-Gitee"><a href="#Git-Gitee" class="headerlink" title="Git Gitee"></a>Git Gitee</h1><p>大家都知道国内访问 Github 速度比较慢，很影响我们的使用。</p>
<p>如果你希望体验到 Git 飞一般的速度，可以使用国内的 Git 托管服务——<a class="link"   href="https://gitee.com/?utm_source=remote_blog_cnjc" >Gitee（gitee.com）<i class="fas fa-external-link-alt"></i></a>。</p>
<p>Gitee 提供免费的 Git 仓库，还集成了代码质量检测、项目演示等功能。对于团队协作开发，Gitee 还提供了项目管理、代码托管、文档管理的服务，5 人以下小团队免费。</p>
<p>接下来我们学习一下如何使用 Gitee。</p>
<p>由于我们的本地 Git 仓库和 Gitee 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息。</p>
<p><strong>1、我们先在 <a class="link"   href="https://gitee.com/?utm_source=remote_blog_cnjc" >Gitee<i class="fas fa-external-link-alt"></i></a> 上注册账号并登录后，然后上传自己的 SSH 公钥。</strong></p>
<p>我们在 Git Github 章节已经生成了自己的 SSH 公钥，所以我们只需要将用户主目录下的 ~&#x2F;.ssh&#x2F;id_rsa.pub 文件的内容粘贴 Gitee 上。</p>
<p>选择右上角用户头像 -&gt; 设置，然后选择 “SSH公钥”，填写一个便于识别的标题，然后把用户主目录下的 .ssh&#x2F;id_rsa.pub 文件的内容粘贴进去：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2020/03/gitee1.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2020/03/gitee2.png"
                      alt="img"
                ></p>
<p>成功添加后如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2020/03/gitee3.png"
                      alt="img"
                ></p>
<p>接下来我们创建一个项目。</p>
<p>点击右上角的 <strong>+</strong> 号，新建仓库：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2020/03/gitee4.png"
                      alt="img"
                ></p>
<p>然后添加仓库信息：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2020/03/gitee5.png"
                      alt="img"
                ></p>
<p>创建成功后看到如下信息：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2020/03/gitee6.png"
                      alt="img"
                ></p>
<p>接下来我们看下连接信息：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2020/03/gitee7.png"
                      alt="img"
                ></p>
<p>项目名称最好与本地库保持一致。</p>
<p>然后，我们在本地库上使用命令 <strong>git remote add</strong> 把它和 Gitee 的远程库关联：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin git@gitee.com:imnoob/runoob-test.git</span><br></pre></td></tr></table></figure>

<p>之后，就可以正常地用 git push 和 git pull 推送了！</p>
<p>如果在使用命令 git remote add 时报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin git@gitee.com:imnoob/runoob-test.git</span><br><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></table></figure>

<p>这说明本地库已经关联了一个名叫 origin 的远程库，此时，可以先用 <strong>git remote -v</strong> 查看远程库信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin    git@github.com:tianqixin/runoob.git (fetch)</span><br><span class="line">origin    git@github.com:tianqixin/runoob.git (push)</span><br></pre></td></tr></table></figure>

<p>可以看到，本地库已经关联了 origin 的远程库，并且，该远程库指向 GitHub。</p>
<p>我们可以删除已有的 GitHub 远程库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>

<p>再关联 Gitee 的远程库（注意路径中需要填写正确的用户名）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin git@gitee.com:imnoob/runoob-test.git</span><br></pre></td></tr></table></figure>

<p>此时，我们再查看远程库信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin    git@gitee.com:imnoob/runoob-test.git (fetch)</span><br><span class="line">origin    git@gitee.com:imnoob/runoob-test.git (push)</span><br></pre></td></tr></table></figure>

<p>现在可以看到，origin 已经被关联到 Gitee 的远程库了。</p>
<p>通过 git push 命令就可以把本地库推送到 Gitee 上。</p>
<p>有的小伙伴又要问了，一个本地库能不能既关联 GitHub，又关联 Gitee 呢？</p>
<p>答案是肯定的，因为 git 本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。</p>
<p>使用多个远程库时，我们要注意，git 给远程库起的默认名称是 origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p>
<p>仍然以 runoob-test 本地库为例，我们先删除已关联的名为 origin 的远程库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>

<p>然后，先关联 GitHub 的远程库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add github git@github.com:tianqixin/runoob-git-test.git</span><br></pre></td></tr></table></figure>

<p>注意，远程库的名称叫 github，不叫 origin 了。</p>
<p>接着，再关联 Gitee 的远程库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:imnoob/runoob-test.git</span><br></pre></td></tr></table></figure>

<p>同样注意，远程库的名称叫 gitee，不叫 origin。</p>
<p>现在，我们用 git remote -v 查看远程库信息，可以看到两个远程库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">gitee    git@gitee.com:imnoob/runoob-test.git (fetch)</span><br><span class="line">gitee    git@gitee.com:imnoob/runoob-test.git (push)</span><br><span class="line">github    git@github.com:tianqixin/runoob.git (fetch)</span><br><span class="line">github    git@github.com:tianqixin/runoob.git (push)</span><br></pre></td></tr></table></figure>

<p>如果要推送到 GitHub，使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></table></figure>

<p>如果要推送到 Gitee，使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<p>这样一来，我们的本地库就可以同时与多个远程库互相同步：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2020/03/gitee8.png"
                      alt="img"
                ></p>
<h1 id="Git-服务器搭建"><a href="#Git-服务器搭建" class="headerlink" title="Git 服务器搭建"></a>Git 服务器搭建</h1><p>上一章节中我们远程仓库使用了 Github，Github 公开的项目是免费的，2019 年开始 Github 私有存储库也可以无限制使用。</p>
<p>这当然我们也可以自己搭建一台 Git 服务器作为私有仓库使用。</p>
<p>接下来我们将以 Centos 为例搭建 Git 服务器。</p>
<h3 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">$ yum install git</span><br></pre></td></tr></table></figure>

<p>接下来我们 创建一个git用户组和用户，用来运行git服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ groupadd git</span><br><span class="line">$ useradd git -g git</span><br></pre></td></tr></table></figure>

<h3 id="2、创建证书登录"><a href="#2、创建证书登录" class="headerlink" title="2、创建证书登录"></a>2、创建证书登录</h3><p>收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys文件里，一行一个。</p>
<p>如果没有该文件创建它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /home/git/</span><br><span class="line">$ mkdir .ssh</span><br><span class="line">$ chmod 755 .ssh</span><br><span class="line">$ touch .ssh/authorized_keys</span><br><span class="line">$ chmod 644 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>



<h3 id="3、初始化Git仓库"><a href="#3、初始化Git仓库" class="headerlink" title="3、初始化Git仓库"></a>3、初始化Git仓库</h3><p>首先我们选定一个目录作为Git仓库，假定是&#x2F;home&#x2F;gitrepo&#x2F;runoob.git，在&#x2F;home&#x2F;gitrepo目录下输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /home</span><br><span class="line">$ mkdir gitrepo</span><br><span class="line">$ chown git:git gitrepo/</span><br><span class="line">$ cd gitrepo</span><br><span class="line"></span><br><span class="line">$ git init --bare runoob.git</span><br><span class="line">Initialized empty Git repository in /home/gitrepo/runoob.git/</span><br></pre></td></tr></table></figure>

<p>以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chown -R git:git runoob.git</span><br></pre></td></tr></table></figure>

<h3 id="4、克隆仓库"><a href="#4、克隆仓库" class="headerlink" title="4、克隆仓库"></a>4、克隆仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git@192.168.45.4:/home/gitrepo/runoob.git</span><br><span class="line">Cloning into &#x27;runoob&#x27;...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure>

<p>192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。</p>
<p>这样我们的 Git 服务器安装就完成。</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
  </entry>
  <entry>
    <title>Http踩坑</title>
    <url>/2021/12/16/Http%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>Web服务器、Https、宝塔、Host、Header</p>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>构建两个站点，分别映射至两个节点，两个节点又分别映射至同一源站。以达到访问两个站点实则是通过两个节点代理进行访问，隐藏真实IP。</p>
<p>起先搭建完一号站点后，通过修改访问程序，伪造节点请求的数据进行发送。</p>
<p>无异常。</p>
<p>然而搭建二号站点后，通过修改后的访问程序进行访问，无论如何都会造成向一号站点请求的异常情况。可两者的域名并不相同，这令我认为是请求程序除了错误。因为通过浏览器直接访问二号网站，是没有异常的。但排查许久没有找出异常点。</p>
<h1 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h1><p>通过抓取浏览器的请求数据，找出Header中的Host请求不相同。</p>
<p>访问程序请求的数据中包含修改的Header，是由节点抓包得到，此Host为源站Host。因此，访问程序将此Host发送至服务器后，Web服务器无法识别程序欲访问哪一站点，故将此请求提交至默认站点（已配置Https&#x2F;第一个搭建的站点），从而造成了此次异常。</p>
<h1 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h1><p>实际也不是坑，究其原因是学艺不精。误以为Web服务由域名而非Host识别欲访问的站点名。唯一的坑点可能是浏览器自动匹配的Host，干扰了Debug方向。</p>
]]></content>
      <categories>
        <category>踩坑</category>
        <category>宝塔</category>
        <category>web服务</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>JD代挂——Alook抓取CK</title>
    <url>/2021/09/27/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94Alook%E6%8A%93%E5%8F%96CK/</url>
    <content><![CDATA[<h1 id="CK获取"><a href="#CK获取" class="headerlink" title="CK获取"></a>CK获取</h1><blockquote>
<p>CK有效期为一个月。</p>
</blockquote>
<h2 id="安卓-iOS用户通用"><a href="#安卓-iOS用户通用" class="headerlink" title="安卓 iOS用户通用"></a>安卓 iOS用户通用</h2><ol>
<li><p>下载<a class="link"   href="https://www.alookweb.com/" >Alook浏览器<i class="fas fa-external-link-alt"></i></a>（下方有视频教程）</p>
<blockquote>
<p>安卓用户下载地址：<a class="link"   href="https://www.coolapk.com/apk/alook.browser" >Alook浏览器 - 4倍速(alook.browser) - 3.7 - 应用 - 酷安 (coolapk.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>iOS用户可前往<a class="link"   href="https://www.pgyy.vip/" >苹果应用 (pgyy.vip)<i class="fas fa-external-link-alt"></i></a>，获取<a class="link"   href="https://www.alookweb.com/" >Alook浏览器<i class="fas fa-external-link-alt"></i></a>共享账号，免费下载。</p>
</blockquote>
</li>
<li><p>输入地址<strong>bean.m.jd.com</strong>，使用<strong>手机验证码</strong>登录（其他登陆方式仅半小时有效）。</p>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upyun.zyhwjl.cn/img/poolck.png"
                      alt="非验证码登录"
                >非验证码登录，立马失效</p>
</blockquote>
</li>
<li><p>点击下方中间菜单、第二页找到<strong>工具箱</strong>。</p>
</li>
<li><p>选择<strong>开发者工具</strong>。</p>
</li>
<li><p>选择<strong>Cookies</strong>。</p>
</li>
<li><p>点击<strong>拷贝</strong>。</p>
</li>
<li><p>发送至机器人</p>
</li>
</ol>
<blockquote>
<p><strong>特别注意：若多个账号，使用无痕浏览获取CK，切勿点击“退出账号”，否则CK无效。</strong></p>
<p><strong>账号大于两个，反复开关无痕浏览即可。</strong></p>
</blockquote>
<h2 id="视频教程（安卓、iOS通用）"><a href="#视频教程（安卓、iOS通用）" class="headerlink" title="视频教程（安卓、iOS通用）"></a><strong>视频教程（安卓、iOS通用）</strong></h2><blockquote>
<p>如未显示视频请刷新。</p>
</blockquote>
<p><video src="https://upyun.zyhwjl.cn/video/h2getck.mp4" controls="controls" style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;"> ⚠你的浏览器不支持此视频格式，请更换浏览器或设备重试。⚠</video></p>
]]></content>
      <categories>
        <category>羊毛</category>
        <category>J东</category>
        <category>Alook抓取CK</category>
      </categories>
      <tags>
        <tag>代挂</tag>
      </tags>
  </entry>
  <entry>
    <title>JD代挂——wskey教程</title>
    <url>/2021/08/28/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94wskey%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h1><blockquote>
<h2 id="高版本无法抓取问题"><a href="#高版本无法抓取问题" class="headerlink" title="高版本无法抓取问题"></a>高版本无法抓取问题</h2><p>经测试，京东App版本高于10.1.4无法抓取wskey，请使用<a class="link"   href="http://share.zyhwjl.cn/" >京东 10.1.4，点击前往下载<i class="fas fa-external-link-alt"></i></a>抓取。</p>
<h2 id="多账号抓取"><a href="#多账号抓取" class="headerlink" title="多账号抓取"></a>多账号抓取</h2><ol>
<li>在完成第一个账号后，卸载VmosPro里的京东（清除数据也行，不会就卸载）</li>
<li>重新进入第15步，导入京东。</li>
<li>跳过16-27步，直接28步，启动HttpCanary。</li>
<li>完成28-36步。</li>
<li>更多账号，重复以上操作</li>
</ol>
</blockquote>
<p>图床崩溃，教程丢失，请使用CK方式或自行抓包。</p>
]]></content>
      <categories>
        <category>羊毛</category>
        <category>J东</category>
        <category>wskey教程</category>
      </categories>
      <tags>
        <tag>代挂</tag>
      </tags>
  </entry>
  <entry>
    <title>JD代挂——wskey教程iOS</title>
    <url>/2021/09/27/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94wskey%E6%95%99%E7%A8%8BiOS/</url>
    <content><![CDATA[<h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1><blockquote>
<h2 id="高版本抓取问题"><a href="#高版本抓取问题" class="headerlink" title="高版本抓取问题"></a>高版本抓取问题</h2><p>经测试，京东App最新版本抓取wskey存在没有pin的问题，请使用安卓抓取。</p>
<p>或使用命令2的方式</p>
<p>当然你也可以选择降级京东App，版本自行测试。</p>
<h1 id="多账号抓取"><a href="#多账号抓取" class="headerlink" title="多账号抓取"></a>多账号抓取</h1><ol>
<li>在完成第一个账号后，卸载卸载卸载卸载京东（否则会导致之前账号失效）</li>
<li>重新安装京东。</li>
<li>从第13步开始抓取第二个账号</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不要登陆不要登陆AppleID，仅在apple store登录共享账号！！！否则可能无法登出AppleID！！！</p>
<p>使用后及时登出共享账户</p>
</blockquote>
<p>图床崩溃，教程丢失，请使用CK方式或自行抓包。</p>
]]></content>
      <categories>
        <category>羊毛</category>
        <category>J东</category>
        <category>wskey教程iOS</category>
      </categories>
      <tags>
        <tag>代挂</tag>
      </tags>
  </entry>
  <entry>
    <title>JD代挂——常见问题</title>
    <url>/2021/09/04/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="我的收益不理想"><a href="#我的收益不理想" class="headerlink" title="我的收益不理想"></a>我的收益不理想</h1><blockquote>
<p>目前为活动冷淡期，收益每天50-300豆属于正常，保持账号活跃（良好购物），有更多参与活动的机会。</p>
<p>京东App–&gt;我的–&gt;上方京享值，可基本判断你的账号状态</p>
<p>​    若8000以上，则基本正常</p>
<p>​    若6000-8000，则需注意日常购物行为</p>
<p>​    若3000-6000，则不可参与部分活动</p>
<p>​    若3000以下，请查看账户是否实名、需实名。</p>
</blockquote>
<h1 id="我的任务有些没有执行"><a href="#我的任务有些没有执行" class="headerlink" title="我的任务有些没有执行"></a>我的任务有些没有执行</h1><blockquote>
<p>同上，账户的购物行为影响你是否可参与活动</p>
<p>若jd标记你的账号，则无法自动执行任务。</p>
<p>判断方法：保持账号有效，若连续三天以上未执行任何任务，则需检查实名</p>
<p>若已实名，仍无法执行，建议暂停半个月代挂。</p>
</blockquote>
<h1 id="我设置的推送没有收到"><a href="#我设置的推送没有收到" class="headerlink" title="我设置的推送没有收到"></a>我设置的推送没有收到</h1><blockquote>
<p>检查pushplustoken及pt_pin是否输入正确，包括格式</p>
<p>检查账户是否已失效</p>
</blockquote>
<h1 id="我的账户总是失效"><a href="#我的账户总是失效" class="headerlink" title="我的账户总是失效"></a>我的账户总是失效</h1><blockquote>
<p>不要退出账户</p>
</blockquote>
<h1 id="我为什么没有收益"><a href="#我为什么没有收益" class="headerlink" title="我为什么没有收益"></a>我为什么没有收益</h1><blockquote>
<p>每日凌晨执行任务，不是每时每刻都在执行，保持账号有效</p>
</blockquote>
<h1 id="Qbot和Tgbot选哪个"><a href="#Qbot和Tgbot选哪个" class="headerlink" title="Qbot和Tgbot选哪个"></a>Qbot和Tgbot选哪个</h1><blockquote>
<p>建议Qbot，因为方便。</p>
<p>你愿意用Tgbot，也可以。</p>
<p>任务是一样做，区别是<del>Qbot极低概率会掉线</del>，没有区别。</p>
</blockquote>
<h1 id="上面的问题都没有我想问的"><a href="#上面的问题都没有我想问的" class="headerlink" title="上面的问题都没有我想问的"></a>上面的问题都没有我想问的</h1><blockquote>
<p>先自己解决试试，实在不行：</p>
<p>发邮件到<a class="link"   href="mailto:zyhwjl@zyhwjl.cn" >邮箱<i class="fas fa-external-link-alt"></i></a>，简单明了描述问题，最好附带CK。</p>
</blockquote>
]]></content>
      <categories>
        <category>羊毛</category>
        <category>J东</category>
        <category>常见问题</category>
      </categories>
      <tags>
        <tag>代挂</tag>
      </tags>
  </entry>
  <entry>
    <title>JD代挂——更新教程</title>
    <url>/2021/08/28/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94%E6%9B%B4%E6%96%B0%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="普通Ck获取（极简）"><a href="#普通Ck获取（极简）" class="headerlink" title="普通Ck获取（极简）"></a>普通Ck获取（极简）</h1><blockquote>
<p>普通CK有效期一个月，故每月需更新账号</p>
</blockquote>
<p>获取命令2：<code>pt_pin=***;pt_key=***;</code>教程</p>
<p><a href="https://blog.zyhwjl.cn/2021/09/27/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94Alook%E6%8A%93%E5%8F%96CK/">安卓、iOS通用 </a></p>
<h1 id="Wskey抓取（较难）"><a href="#Wskey抓取（较难）" class="headerlink" title="Wskey抓取（较难）"></a><del>Wskey抓取（较难）</del></h1><blockquote>
<p><del>Wskey有效期一年，一年抓取一次即可</del></p>
</blockquote>
<p><del>获取命令3：<code>pin=***;wskey=***;</code>教程</del></p>
<p><del><a href="https://blog.zyhwjl.cn/2021/09/27/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94wskey%E6%95%99%E7%A8%8BiOS/">iOS用户</a></del></p>
<p><del>[安卓用户</del>](<a href="https://blog.zyhwjl.cn/2021/08/28/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94wskey%E6%95%99%E7%A8%8B/">https://blog.zyhwjl.cn/2021/08/28/JD代挂——wskey教程/</a>)</p>
<p><strong><u>图床崩溃，教程丢失，请使用CK方式或自行抓包。</u></strong></p>
]]></content>
      <categories>
        <category>羊毛</category>
        <category>J东</category>
        <category>更新教程</category>
      </categories>
      <tags>
        <tag>代挂</tag>
      </tags>
  </entry>
  <entry>
    <title>JD代挂——新手帮助</title>
    <url>/2021/08/11/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94%E6%96%B0%E6%89%8B%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><ol>
<li>前往<a href="https://blog.zyhwjl.cn/2021/08/28/JD%E4%BB%A3%E6%8C%82%E2%80%94%E2%80%94%E6%9B%B4%E6%96%B0%E6%95%99%E7%A8%8B/">更新（新增）账号教程</a><strong>，查看</strong>更新（新增）账号方法。</li>
<li>每一个月到三个月需更新账号。</li>
<li>可代挂多个账号，无上限。</li>
<li>每日收入查询。</li>
</ol>
<h1 id="提供的服务"><a href="#提供的服务" class="headerlink" title="提供的服务"></a>提供的服务</h1><ol>
<li><p>日常签到    收益一般（主要收益）</p>
<p>每日约100-300京dou，100&#x3D;1元。</p>
<p>每月收益约30-90元</p>
<p>购物时可抵扣50%。</p>
</li>
<li><p>临时活动    收益超高</p>
<p>如618、11·11等临时性活动</p>
</li>
<li><p>福利活动    收益高</p>
<ol>
<li><p>J东农场</p>
<p><strong>大概一个月可领取一次12-50元无门槛红包，无需抢（J东App搜索玩一玩–&gt;东东农场）</strong></p>
</li>
<li><p>J东萌宠</p>
<p><strong>大概一个月可领取一次12-30元无门槛红包，无需抢（J东App搜索玩一玩–&gt;东东萌宠）</strong></p>
</li>
<li><p>J东健康</p>
<p>可免费包邮换购常用药品，无需抢（J东App搜索玩一玩–&gt;健康社区）</p>
</li>
<li><p>J喜财富岛</p>
<p>可免费包邮换购奖品，无需抢（J喜–&gt;我的）</p>
</li>
<li><p>J东极速版金币</p>
<p>可领取仅J东极速版可用10-50无门槛红包（极速版–&gt;我的）</p>
</li>
<li><p>更多查看下方图解。</p>
</li>
</ol>
</li>
</ol>
<h1 id="账户安全"><a href="#账户安全" class="headerlink" title="账户安全"></a>账户安全</h1><ol>
<li>本服务使用你的临时密钥（CK，也就是pt_key。）进行操作，非不安全的wskey，可放心使用。</li>
<li>务必关闭小额免密：J东App–&gt;设置–&gt;支付设置–&gt;小额免密</li>
<li>隐私泄露风险：本服务使用开源项目，已累计为超千人提供服务，我自己也在使用，无需担心安全风险。</li>
<li>账户财产风险：登陆后程序仅可进行签到操作，无操作订单等权限。</li>
<li>如若仍有顾虑可尝试将小号代挂测试几天。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>本服务的日常签到包含的一些任务会要求加购物车、收藏店铺等。但在固定时间会统一清理购物车、取关店铺。</p>
<h1 id="欢迎"><a href="#欢迎" class="headerlink" title="欢迎"></a>欢迎</h1><p>欢迎邀请家人朋友代挂本服务。</p>
<p>本服务无任何收费内容，如若被收费那么就是被骗了。</p>
<p>你们的宣传是我更新的动力。</p>
<p>如有问题请联系<a class="link"   href="mailto:zyhwjl@zyhwjl.cn" >邮箱<i class="fas fa-external-link-alt"></i></a>。</p>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://upyun.zyhwjl.cn/img/feed.png"
                      alt="投喂"
                ></p>
<h1 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h1><p><strong>需较长加载时间！</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://ftp.bmp.ovh/imgs/2021/08/c3f637128715f210.png"
                      alt="IMG1"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.bmp.ovh/imgs/2021/08/a665e35ac3a59bd3.png"
                      alt="IMG2"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.bmp.ovh/imgs/2021/08/60795e757113a514.png"
                      alt="IMG3"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.bmp.ovh/imgs/2021/08/c9b98e45b0375922.png"
                      alt="IMG4"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.bmp.ovh/imgs/2021/08/1136e10cc95a3593.png"
                      alt="IMG5"
                ></p>
]]></content>
      <categories>
        <category>羊毛</category>
        <category>J东</category>
        <category>代挂帮助</category>
      </categories>
      <tags>
        <tag>代挂</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习-IDEA无限试用 适用于JetBrains全家桶</title>
    <url>/2021/09/15/Java%E5%AD%A6%E4%B9%A0-IDEA%E6%97%A0%E9%99%90%E8%AF%95%E7%94%A8%20%E9%80%82%E7%94%A8%E4%BA%8EJetBrains%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<h1 id="Eval-Reset插件"><a href="#Eval-Reset插件" class="headerlink" title="Eval Reset插件"></a>Eval Reset插件</h1><blockquote>
<p>项目地址：<a class="link"   href="https://github.com/zhilepeng/ide-eval-resetter" >https://github.com/zhilepeng/ide-eval-resetter<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<ol>
<li>打开ide，在Settings&#x2F;Preferences… -&gt; Plugins 内手动添加第三方插件仓库地址：<a class="link"   href="https://plugins.zhile.io/" >https://plugins.zhile.io<i class="fas fa-external-link-alt"></i></a> 。</li>
<li>搜索：IDE Eval Reset插件进行安装。如果搜索不到请注意是否做好了上一步？网络是否通畅？插件会提示安装成功。</li>
<li>help—-&gt;eval Reset点击重启ide，即可在再次获取30天试用期。</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
        <category>Java</category>
        <category>工具</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习-疑惑之什么是对象</title>
    <url>/2021/04/05/Java%E5%AD%A6%E4%B9%A0-%E7%96%91%E6%83%91%E4%B9%8B%E4%BB%80%E4%B9%88%E6%98%AF%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*如何新建调用point数据类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> zuoye3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wjl03</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line">     point p1=<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">8</span>);</span><br><span class="line">     point p2=<span class="keyword">new</span> point(<span class="number">5</span>,<span class="number">9</span>);</span><br><span class="line">     System.out.println(p2.distance(p1,p2));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">5</span>,y=<span class="number">2</span>;</span><br><span class="line">    point(<span class="keyword">int</span> px,<span class="keyword">int</span> py)&#123;</span><br><span class="line">        x=px;</span><br><span class="line">        y=py;</span><br><span class="line">    &#125;</span><br><span class="line">    point()&#123;</span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(point p1,point p2)</span> </span>&#123;</span><br><span class="line">        System.out.println(p1.x+<span class="string">&quot; &quot;</span>+p2.x+<span class="string">&quot; &quot;</span>+p1.y+<span class="string">&quot; &quot;</span>+p2.y);</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>Java</category>
        <category>疑惑</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习-疑惑之Spring与Spring Boot</title>
    <url>/2021/11/22/Java%E5%AD%A6%E4%B9%A0-%E7%96%91%E6%83%91%E4%B9%8BSpring%E4%B8%8ESpring%20Boot/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>  对于<code>Spring</code>和<code>SpringBoot</code>到底有什么区别，我听到了很多答案，刚开始迈入学习<code>SpringBoot</code>的我当时也是一头雾水，随着经验的积累、我慢慢理解了这两个框架到底有什么区别，相信对于用了<code>SpringBoot</code>很久的同学来说，还不是很理解<code>SpringBoot</code>到底和<code>Spring</code>有什么区别，看完文章中的比较，或许你有了不同的答案和看法！</p>
<h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>  作为<code>Java</code>开发人员，大家都<code>Spring</code>都不陌生，简而言之，<code>Spring</code>框架为开发<code>Java</code>应用程序提供了全面的基础架构支持。它包含一些很好的功能，如依赖注入和开箱即用的模块，如：<code>Spring JDBC 、Spring MVC 、Spring Security、 Spring AOP 、Spring ORM 、Spring Test</code>，这些模块缩短应用程序的开发时间，提高了应用开发的效率例如，在<code>Java Web</code>开发的早期阶段，我们需要编写大量的代码来将记录插入到数据库中。但是通过使用<code>Spring JDBC</code>模块的<code>JDBCTemplate</code>，我们可以将操作简化为几行代码。</p>
<h2 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a>什么是Spring Boot</h2><p>  <code>Spring Boot</code>基本上是<code>Spring</code>框架的扩展，它消除了设置<code>Spring</code>应用程序所需的<code>XML配置</code>，为更快，更高效的开发生态系统铺平了道路。</p>
<p><strong><code>Spring Boot</code>中的一些特征：</strong></p>
<ol>
<li>创建独立的<code>Spring</code>应用。</li>
<li>嵌入式<code>Tomcat</code>、<code>Jetty</code>、 <code>Undertow</code>容器（无需部署war文件）。</li>
<li>提供的<code>starters</code> 简化构建配置</li>
<li>尽可能自动配置<code>spring</code>应用。</li>
<li>提供生产指标,例如指标、健壮检查和外部化配置</li>
<li>完全没有代码生成和<code>XML</code>配置要求</li>
</ol>
<h2 id="从配置分析"><a href="#从配置分析" class="headerlink" title="从配置分析"></a>从配置分析</h2><h3 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h3><p><strong>首先，让我们看一下使用Spring创建Web应用程序所需的最小依赖项</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>与Spring不同，Spring Boot只需要一个依赖项来启动和运行Web应用程序：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在进行构建期间，所有其他依赖项将自动添加到项目中。</strong></p>
<p>  另一个很好的例子就是测试库。我们通常使用<code>Spring Test</code>，<code>JUnit</code>，<code>Hamcrest</code>和<code>Mockito</code>库。在<code>Spring</code>项目中，我们应该将所有这些库添加为依赖项。但是在<code>Spring Boot中</code>，我们只需要添加<code>spring-boot-starter-test</code>依赖项来自动包含这些库。</p>
<p><strong>Spring Boot为不同的Spring模块提供了许多依赖项。一些最常用的是：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-data-jpa`</span><br><span class="line"> `spring-boot-starter-security`</span><br><span class="line"> `spring-boot-starter-test`</span><br><span class="line"> `spring-boot-starter-web`</span><br><span class="line"> `spring-boot-starter-thymeleaf</span><br></pre></td></tr></table></figure>

<p>有关<code>starter</code>的完整列表，请查看<a class="link"   href="https://links.jianshu.com/go?to=https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/%23using-boot-starter" >Spring文档<i class="fas fa-external-link-alt"></i></a>。</p>
<h3 id="MVC配置"><a href="#MVC配置" class="headerlink" title="MVC配置"></a>MVC配置</h3><p><strong>让我们来看一下<code>Spring</code>和<code>Spring Boot</code>创建<code>JSP Web</code>应用程序所需的配置。</strong></p>
<p><code>Spring</code>需要定义调度程序<code>servlet</code>，映射和其他支持配置。我们可以使用 <code>web.xml</code> 文件或<code>Initializer</code>类来完成此操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext container)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">        context.setConfigLocation(<span class="string">&quot;com.pingfangushi&quot;</span>);</span><br><span class="line">          container.addListener(<span class="keyword">new</span> ContextLoaderListener(context));</span><br><span class="line">          ServletRegistration.Dynamic dispatcher = container</span><br><span class="line">          .addServlet(<span class="string">&quot;dispatcher&quot;</span>, <span class="keyword">new</span> DispatcherServlet(context));</span><br><span class="line">        dispatcher.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        dispatcher.addMapping(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还需要将<code>@EnableWebMvc</code>注释添加到<code>@Configuration</code>类，并定义一个视图解析器来解析从控制器返回的视图：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123; </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      InternalResourceViewResolver bean</span><br><span class="line">        = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">      bean.setViewClass(JstlView.class);</span><br><span class="line">      bean.setPrefix(<span class="string">&quot;/WEB-INF/view/&quot;</span>);</span><br><span class="line">      bean.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看<code>SpringBoot</code>一旦我们添加了<code>Web</code>启动程序，<code>Spring Boot</code>只需要在<code>application</code>配置文件中配置几个属性来完成如上操作：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure>

<p><strong>上面的所有Spring配置都是通过一个名为<a class="link"   href="https://links.jianshu.com/go?to=https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html" >auto-configuration<i class="fas fa-external-link-alt"></i></a>的过程添加<code>Boot web starter</code>来自动包含的。</strong></p>
<p>  这意味着<code>Spring Boot</code>将查看应用程序中存在的依赖项，属性和<code>bean</code>，并根据这些依赖项，对属性和<code>bean</code>进行配置。当然，如果我们想要添加自己的自定义配置，那么<code>Spring Boot</code>自动配置将会退回。</p>
<h3 id="配置模板引擎"><a href="#配置模板引擎" class="headerlink" title="配置模板引擎"></a>配置模板引擎</h3><p><strong>现在我们来看下如何在Spring和Spring Boot中配置Thymeleaf模板引擎。</strong></p>
<p>在<code>Spring</code>中，我们需要为视图解析器添加<code>thymeleaf-spring5</code>依赖项和一些配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringResourceTemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringResourceTemplateResolver templateResolver = <span class="keyword">new</span> SpringResourceTemplateResolver();</span><br><span class="line">        templateResolver.setApplicationContext(applicationContext);</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/views/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver());</span><br><span class="line">        templateEngine.setEnableSpringELCompiler(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        ThymeleafViewResolver resolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">        resolver.setTemplateEngine(templateEngine());</span><br><span class="line">        registry.viewResolver(resolver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  <code>SpringBoot1X</code>只需要<code>spring-boot-starter-thymeleaf</code>的依赖项来启用<code>Web</code>应用程序中的<code>Thymeleaf</code>支持。<br>  但是由于<code>Thymeleaf3.0</code>中的新功能，我们必须将<code>thymeleaf-layout-dialect</code> 添加为<code>SpringBoot2X</code>Web应用程序中的依赖项。配置好依赖，我们就可以将模板添加到<code>src/main/resources/templates</code>文件夹中，<code>SpringBoot</code>将自动显示它们。</p>
<h3 id="Spring-Security-配置"><a href="#Spring-Security-配置" class="headerlink" title="Spring Security 配置"></a>Spring Security 配置</h3><p>  为简单起见，我们使用框架默认的<code>HTTP Basic</code>身份验证。让我们首先看一下使用<code>Spring</code>启用<code>Security</code>所需的依赖关系和配置。<br>  <code>Spring</code>首先需要依赖  <code>spring-security-web</code>和<code>spring-security-config</code>  模块。接下来，  我们需要添加一个扩展<code>WebSecurityConfigurerAdapter</code>的类，并使用<code>@EnableWebSecurity</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWebSecurityConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">          .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .password(passwordEncoder()</span><br><span class="line">            .encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">          .authorities(<span class="string">&quot;ROLE_ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">          .anyRequest().authenticated()</span><br><span class="line">          .and()</span><br><span class="line">          .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  这里我们使用<code>inMemoryAuthentication</code>来设置身份验证。同样，<code>Spring Boot</code>也需要这些依赖项才能使其工作。但是我们只需要定义<code>spring-boot-starter-security</code>的依赖关系，因为这会自动将所有相关的依赖项添加到类路径中。</p>
<p><strong><code>Spring Boot</code>中的安全配置与上面的相同</strong> 。</p>
<h2 id="应用程序启动引导配置"><a href="#应用程序启动引导配置" class="headerlink" title="应用程序启动引导配置"></a>应用程序启动引导配置</h2><p><code>Spring</code>和<code>Spring Boot</code>中应用程序引导的基本区别在于<code>servlet</code>。<br> <code>Spring</code>使用<code>web.xml</code>  或<code>SpringServletContainerInitializer</code>作为其引导入口点。<br> <code>Spring Boot</code>仅使用<code>Servlet 3</code>功能来引导应用程序，下面让我们详细来了解下</p>
<h3 id="Spring-引导配置"><a href="#Spring-引导配置" class="headerlink" title="Spring 引导配置"></a>Spring 引导配置</h3><p><code>Spring</code>支持传统的<code>web.xml</code>引导方式以及最新的<code>Servlet 3+</code>方法。</p>
<p><strong>配置<code>web.xml</code>方法启动的步骤</strong></p>
<ul>
<li><code>Servlet</code>容器（服务器）读取<code>web.xml</code></li>
<li><code>web.xml</code>中定义的<code>DispatcherServlet</code>由容器实例化</li>
<li><code>DispatcherServlet</code>通过读取<code>WEB-INF / &#123;servletName&#125; -servlet.xml</code>来创建<code>WebApplicationContext</code>。最后，<code>DispatcherServlet</code>注册在应用程序上下文中定义的<code>bean</code></li>
</ul>
<p><strong>使用<code>Servlet 3+</code>方法的<code>Spring</code>启动步骤</strong></p>
<p>容器搜索实现<code>ServletContainerInitializer</code>的类并执行<code>SpringServletContainerInitializer</code>找到实现所有类<code>WebApplicationInitializer``WebApplicationInitializer</code>创建具有XML或上下文<code>@Configuration</code>类<code>WebApplicationInitializer</code>创建<code>DispatcherServlet</code>与先前创建的上下文。</p>
<h3 id="SpringBoot-引导配置"><a href="#SpringBoot-引导配置" class="headerlink" title="SpringBoot 引导配置"></a>SpringBoot 引导配置</h3><p><strong>Spring Boot应用程序的入口点是使用@SpringBootApplication注释的类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  默认情况下，<code>Spring Boot</code>使用嵌入式容器来运行应用程序。在这种情况下，<code>Spring Boot</code>使用<code>public static void main</code>入口点来启动嵌入式<code>Web</code>服务器。此外，它还负责将<code>Servlet</code>，<code>Filter</code>和<code>ServletContextInitializer bean</code>从应用程序上下文绑定到嵌入式<code>servlet</code>容器。<br> <code>Spring Boot</code>的另一个特性是它会自动扫描同一个包中的所有类或<code>Main</code>类的子包中的组件。</p>
<p><code>Spring Boot</code>提供了将其部署到外部容器的方式。我们只需要扩展<code>SpringBootServletInitializer</code>即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * War部署</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SanLi</span></span><br><span class="line"><span class="comment"> * Created by 2689170096@qq.com on 2018/4/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStartup(servletContext);</span><br><span class="line">        servletContext.addListener(<span class="keyword">new</span> HttpSessionEventPublisher());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  这里外部<code>servlet</code>容器查找在war包下的<code>META-INF</code>文件夹下MANIFEST.MF文件中定义的<code>Main-class</code>，<code>SpringBootServletInitializer</code>将负责绑定<code>Servlet</code>，<code>Filter</code>和<code>ServletContextInitializer</code>。</p>
<h2 id="打包和部署"><a href="#打包和部署" class="headerlink" title="打包和部署"></a>打包和部署</h2><p>  最后，让我们看看如何打包和部署应用程序。这两个框架都支持<code>Maven</code>和<code>Gradle</code>等通用包管理技术。但是在部署方面，这些框架差异很大。例如，<a class="link"   href="https://links.jianshu.com/go?to=https://docs.spring.io/spring-boot/docs/current/maven-plugin/" >Spring Boot Maven插件<i class="fas fa-external-link-alt"></i></a>在<code>Maven</code>中提供<code>Spring Boot</code>支持。它还允许打包可执行<code>jar</code>或<code>war</code>包并<code>就地</code>运行应用程序。</p>
<p>在部署环境中<code>Spring Boot</code> 对比<code>Spring</code>的一些优点包括：</p>
<ul>
<li>提供嵌入式容器支持</li>
<li>使用命令<em>java -jar</em>独立运行jar</li>
<li>在外部容器中部署时，可以选择排除依赖关系以避免潜在的jar冲突</li>
<li>部署时灵活指定配置文件的选项</li>
<li>用于集成测试的随机端口生成</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>简而言之，我们可以说<code>Spring Boot</code>只是<code>Spring</code>本身的扩展，使开发，测试和部署更加方便。</p>
<p>作者：乐傻驴<br>链接：<a class="link"   href="https://www.jianshu.com/p/ffe5ebe17c3a" >https://www.jianshu.com/p/ffe5ebe17c3a<i class="fas fa-external-link-alt"></i></a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Java</category>
        <category>疑惑</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下切换默认Python版本</title>
    <url>/2021/05/09/Ubuntu%E4%B8%8B%E5%88%87%E6%8D%A2%E9%BB%98%E8%AE%A4Python%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="以-root-身份登录"><a href="#以-root-身份登录" class="headerlink" title="以 root 身份登录"></a>以 root 身份登录</h1><p>首先罗列出所有可用的python 替代版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --list python</span><br></pre></td></tr></table></figure>

<p>这一步可能会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives: error: no alternatives <span class="keyword">for</span> python</span><br></pre></td></tr></table></figure>



<h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h1><p>如果出现以上所示的错误信息，则表示 Python 的替代版本尚未被update-alternatives 命令识别。想解决这个问题，我们需要更新一下替代列表，将python2.7 和 python3.6 放入其中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1  </span><br><span class="line">update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2</span><br></pre></td></tr></table></figure>

<p>最后的1、2、3…代表序号，后面会有用</p>
<h1 id="再次列出可用的-Python-替代版本"><a href="#再次列出可用的-Python-替代版本" class="headerlink" title="再次列出可用的 Python 替代版本"></a>再次列出可用的 Python 替代版本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --list python</span><br></pre></td></tr></table></figure>



<h1 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h1><p>我们就可以使用下方的命令随时在列出的 Python 替代版本中任意切换了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --config python</span><br></pre></td></tr></table></figure>

<p>输入数字,选择版本</p>
<h1 id="查看变化"><a href="#查看变化" class="headerlink" title="查看变化"></a>查看变化</h1><p>在terminal中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>实用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu的防火墙</title>
    <url>/2021/04/14/Ubuntu%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<h1 id="关闭ubuntu的防火墙"><a href="#关闭ubuntu的防火墙" class="headerlink" title="关闭ubuntu的防火墙"></a>关闭ubuntu的防火墙</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>

<h1 id="卸载了iptables"><a href="#卸载了iptables" class="headerlink" title="卸载了iptables"></a>卸载了iptables</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get remove iptables	<span class="comment">#重启后即关闭所有防火墙</span></span><br></pre></td></tr></table></figure>

<h1 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>

<h1 id="关闭ubuntu中的防火墙的其余命令"><a href="#关闭ubuntu中的防火墙的其余命令" class="headerlink" title="关闭ubuntu中的防火墙的其余命令"></a>关闭ubuntu中的防火墙的其余命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT ACCEPT``iptables -P FORWARD ACCEPT``iptables -P OUTPUT ACCEPT``iptables -F</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>实用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习-疑惑之Spring与Spring Boot</title>
    <url>/2021/11/22/%E4%B8%80%E9%94%AEMTProxy/</url>
    <content><![CDATA[<p>wget -N –no-check-certificate <a class="link"   href="https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/mtproxy.sh" >https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/mtproxy.sh<i class="fas fa-external-link-alt"></i></a> &amp;&amp; chmod +x mtproxy.sh &amp;&amp; bash mtproxy.sh</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Java</category>
        <category>疑惑</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ZYHWJL 视频解析</title>
    <url>/2021/04/15/ZYHWJL%20%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<script src="https://v.zyhwjl.tk/js/index.js" type="text/javascript" charset="utf-8"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<body style="background-color: #F7F7F7">
    <iframe src="https://v.zyhwjl.tk/files/sp.html" id="player" width="100%" height="500px" allowfullscreen="true" allowtransparency="true" frameborder="0" scrolling="no"></iframe>

<form style="line-height: 15px;">
    <div class="input-group" style="width: 100%;">
        <span class="input-group-addon input-lg" style="width: 80px; color:red;">不能播放换接口</span>
        <select class="form-control input-lg" id="jk" name="a">
            <option value="https://v.zyhwjl.cn/jiexi/?url=">ZYHWJL</option>
            <option value="https://www.8090g.cn/jiexi/?url=">1号默认解析接口</option>
            <option value="https://z1.m1907.cn/?a=1&amp;jx=">2号解接口(能搜索)</option>
            <option value="https://okjx.cc/?url=">3号解接口(备用)</option>
            <option value="https://17kyun.com/api.php?url=">4号解接口(备用)</option>
            <option value="https://2.08bk.com/?url=">5号解接口(备用)</option>
            <option value="https://www.administratorw.com/admin.php?url=">6号解接口(备用)</option>
            <option value="https://jsap.attakids.com/?url=">7号解接口(备用)</option>
            <option value="https://api.52jiexi.top/analysis.php?v=">8号解接口(备用)</option>
        </select>
    </div><br>
    <div class="input-group" style="width: 100%;">
        <span class="input-group-addon input-lg" style="width: 80px;">需要解析视频网址</span>
        <input class="form-control input-lg" type="text" name="url" autocomplete="off" placeholder="粘贴视频网址" id="url">
    </div><br>
    <button type="button" id="bf" value="解析播放" class="btn btn-success btn-lg btn-block" onclick="bfjx()">Go-点击开始解析</button>
</form>
</body>

]]></content>
      <categories>
        <category>测试</category>
        <category>视频解析</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下开启SSH</title>
    <url>/2021/04/14/linux%E4%B8%8B%E5%BC%80%E5%90%AFSSH/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#若无vim ，则安装。或安装宝塔自动安装</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vim</span><br><span class="line"><span class="comment">#查找并修改以下数据</span></span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line">--&gt;</span><br><span class="line">PermitRootLogin yes <span class="comment">#允许root登录</span></span><br><span class="line">PasswordAuthentication yes <span class="comment"># 设置是否使用口令验证。</span></span><br><span class="line"><span class="comment">#设置root密码</span></span><br><span class="line">sudo -i</span><br><span class="line">passwd <span class="comment">#输入密码无提示</span></span><br><span class="line"><span class="comment">#修改后重启ssh服务</span></span><br><span class="line">service sshd restart <span class="comment"># 或者</span></span><br><span class="line">/etc/initd .d /sshd restart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>实用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>国外技巧</title>
    <url>/2021/09/16/%E5%9B%BD%E5%A4%96%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="Telegram官方汉化"><a href="#Telegram官方汉化" class="headerlink" title="Telegram官方汉化"></a>Telegram官方汉化</h1><p><a class="link"   href="https://t.me/setlanguage/zh-hans-beta" >https://t.me/setlanguage/zh-hans-beta<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="一键MTProxy"><a href="#一键MTProxy" class="headerlink" title="一键MTProxy"></a>一键MTProxy</h1><blockquote>
<p>可搭配国内中转使用</p>
</blockquote>
<p><del><code>wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/mtproxy.sh &amp;&amp; chmod +x mtproxy.sh &amp;&amp; bash mtproxy.sh</code></del></p>
<p><code>wget -N --no-check-certificate https://github.com/if1y/MTProxy-GO_OnekeyMake/raw/master/mtproxy_go.sh &amp;&amp; chmod +x mtproxy_go.sh &amp;&amp; bash mtproxy_go.sh</code></p>
]]></content>
      <categories>
        <category>国外</category>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>因果图</title>
    <url>/2021/05/08/%E5%9B%A0%E6%9E%9C%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="黑盒测试的三种"><a href="#黑盒测试的三种" class="headerlink" title="黑盒测试的三种"></a>黑盒测试的三种</h2><ol>
<li>等价类划分法</li>
<li>边界值分析法</li>
<li>因果图法</li>
</ol>
<p>12存在缺陷，未考虑输入输出、输入输入、输出输出关系。故引入因果图</p>
<h2 id="因果图（Cause-and-Effect-Diagram）"><a href="#因果图（Cause-and-Effect-Diagram）" class="headerlink" title="因果图（Cause and Effect Diagram）"></a>因果图（Cause and Effect Diagram）</h2><p>​    因：输入</p>
<p>​    果：输出</p>
<h3 id="因与因-E-I-O-R"><a href="#因与因-E-I-O-R" class="headerlink" title="因与因(E I O R)"></a>因与因(E I O R)</h3><ol>
<li><p>Exclusive    排外的</p>
<p>C1 C2 C3不可同时成立</p>
</li>
<li><p>InClusive    包含</p>
<p>C1 C2 C2至少一个为1(True) 不可全部为0</p>
</li>
<li><p>Only</p>
<p>C1 C2必须有,且仅有一个为1。</p>
</li>
<li><p>Require</p>
<p>C1为1时，C2必定为1。反之，C2为1,C1不必为1。</p>
<p>Eg:a&gt;90 b&gt;60    则a-1–&gt;b-1</p>
</li>
</ol>
<h3 id="因与果-恒等-相等、与、或、非"><a href="#因与果-恒等-相等、与、或、非" class="headerlink" title="因与果(恒等-相等、与、或、非)"></a>因与果(恒等-相等、与、或、非)</h3><ol>
<li><p>相等</p>
<p>if(C) then Ef</p>
</li>
<li><p>与</p>
<p>if(C1&amp;&amp;C2&amp;&amp;C3) then Ef</p>
</li>
<li><p>或</p>
<p>if(C1||C2||C3) then Ef</p>
</li>
<li><p>非</p>
<p>if(!C) then Ef</p>
</li>
</ol>
<h3 id="果与果（M约束）"><a href="#果与果（M约束）" class="headerlink" title="果与果（M约束）"></a>果与果（M约束）</h3><ol>
<li><p>Masking</p>
<p>Ef1为1时，Ef2为0。反之，不可推。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
        <category>软件测试</category>
        <category>黑盒测试</category>
      </categories>
  </entry>
  <entry>
    <title>奇特简易出国--出国了但没完全出国</title>
    <url>/2021/11/19/%E5%A5%87%E7%89%B9%E7%AE%80%E6%98%93%E5%87%BA%E5%9B%BD-%E5%87%BA%E5%9B%BD%E4%BA%86%E4%BD%86%E6%B2%A1%E5%AE%8C%E5%85%A8%E5%87%BA%E5%9B%BD/</url>
    <content><![CDATA[<h1 id="404站"><a href="#404站" class="headerlink" title="404站"></a>404站</h1><p>项目地址<a class="link"   href="https://github.com/cuber/ngx_http_google_filter_module" >Nginx Module for Google Mirror<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h4><ol>
<li><a href="http://www.pcre.org/"><code>pcre</code></a> <em>正则</em></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html"><code>ngx_http_proxy_module</code></a> <em>反向代理</em></li>
<li><a href="https://github.com/yaoweibin/ngx_http_substitutions_filter_module"><code>ngx_http_substitutions_filter_module</code></a> <em>多重替换</em></li>
</ol>
<h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><h5 id="Download-sources-first"><a href="#Download-sources-first" class="headerlink" title="Download sources first"></a>Download sources first</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># download the newest source</span><br><span class="line"># @see http://nginx.org/en/download.html</span><br><span class="line">#</span><br><span class="line">wget http://nginx.org/download/nginx-1.7.8.tar.gz</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># clone ngx_http_google_filter_module</span><br><span class="line"># @see https://github.com/cuber/ngx_http_google_filter_module</span><br><span class="line">#</span><br><span class="line">git clone https://github.com/cuber/ngx_http_google_filter_module</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># clone ngx_http_substitutions_filter_module</span><br><span class="line"># @see https://github.com/yaoweibin/ngx_http_substitutions_filter_module</span><br><span class="line">#</span><br><span class="line">git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure>

<h5 id="Brand-new-installation"><a href="#Brand-new-installation" class="headerlink" title="Brand new installation"></a>Brand new installation</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># configure nginx customly</span><br><span class="line"># replace &lt;/path/to/&gt; with your real path</span><br><span class="line">#</span><br><span class="line">./configure \</span><br><span class="line">  &lt;your configuration&gt; \</span><br><span class="line">  --add-module=&lt;/path/to/&gt;ngx_http_google_filter_module \</span><br><span class="line">  --add-module=&lt;/path/to/&gt;ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure>

<h4 id="宝塔安装"><a href="#宝塔安装" class="headerlink" title="宝塔安装"></a>宝塔安装</h4><ol>
<li><p>创建模块文件夹</p>
</li>
<li><p>下载库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/cuber/ngx_http_google_filter_module</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># clone ngx_http_substitutions_filter_module</span><br><span class="line"># @see https://github.com/yaoweibin/ngx_http_substitutions_filter_module</span><br><span class="line">#</span><br><span class="line">git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装</p>
<p>软件商店–Nginx–配置</p>
<blockquote>
<p>踩坑点，Nginx高版本应使用–add-dynamic-module引入第三方模块</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--add-dynamic-module=&lt;/path/to/&gt;ngx_http_google_filter_module \</span><br><span class="line">--add-module=&lt;/path/to/&gt;ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<ol>
<li>编辑Nginx配置文件，最上方加入<blockquote>
<p>踩坑点，Nginx高版本应手动引入第三方模块</p>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load_module modules/ngx_http_google_filter_module.so;</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>编辑网站配置文件，加入</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resolver 8.8.8.8;</span><br><span class="line">location / &#123;</span><br><span class="line">  google on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>注释，否则部分css,logo无法加载。原因：源站不存在静态资源，故关闭源站目录，全局反代。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    # index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    # root domain;</span><br><span class="line">    </span><br><span class="line">    #ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br><span class="line">    #error_page 404 /404.html;</span><br><span class="line">    #error_page 502 /502.html;</span><br><span class="line">    #ERROR-PAGE-END</span><br><span class="line">    </span><br><span class="line">    #PHP-INFO-START  PHP引用配置，可以注释或修改</span><br><span class="line">    # include enable-php-00.conf;</span><br><span class="line">    #PHP-INFO-END</span><br><span class="line">    </span><br><span class="line">    #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效</span><br><span class="line">    # include /www/server/panel/vhost/rewrite/google.zyhwjl.cf.conf;</span><br><span class="line">    #REWRITE-END</span><br><span class="line">    </span><br><span class="line">    # location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    # &#123;</span><br><span class="line">    #     expires      30d;</span><br><span class="line">    #     error_log /dev/null;</span><br><span class="line">    #     access_log /dev/null;</span><br><span class="line">    # &#125;</span><br><span class="line">    </span><br><span class="line">    # location ~ .*\.(js|css)?$</span><br><span class="line">    # &#123;</span><br><span class="line">    #     expires      12h;</span><br><span class="line">    #     error_log /dev/null;</span><br><span class="line">    #     access_log /dev/null; </span><br><span class="line">    # &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p>编辑网站配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">proxy_set_header Accept-Encoding &quot;&quot;; #不使用压缩，如gzip</span><br><span class="line">proxy_set_header Connection &quot;&quot;;</span><br><span class="line">proxy_http_version 1.1; #使用http1.1长连接</span><br><span class="line">proxy_connect_timeout    10s; #设置连接超时</span><br><span class="line">proxy_read_timeout       10s; #设置读取超时</span><br><span class="line">proxy_set_header Host github.com;</span><br><span class="line">proxy_hide_header Strict-Transport-Security; #隐藏协议头，避免因为反向代理开启hsts</span><br><span class="line">proxy_pass https://github.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注释内容参照404网站</p>
]]></content>
      <categories>
        <category>折腾</category>
        <category>实用</category>
        <category>出国</category>
      </categories>
      <tags>
        <tag>出国技能</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows将FRP设置为服务并开机自启</title>
    <url>/2021/03/10/%E5%B0%86FRP%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%B9%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</url>
    <content><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>下载<a class="link"   href="https://github.com/kohsuke/winsw/releases" >WINSW<i class="fas fa-external-link-alt"></i></a>，将WINSW解压至frp文件夹下，<em>此一步非必须，只是为了有序。</em>并重命名为winsw.exe。<br>在目录下创建winsw.xml文件。<em>编码必须为UTF-8？</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该服务的唯一标识 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>frp<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该服务的名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>frp0.27.1-windows-amd64<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该服务的描述 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>frpc客户端 这个服务用 frpc 实现内网穿透<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要运行的程序路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>D:\Software\frp\frp_0.27.1_windows_amd64\frpc.exe<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 携带的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-c frpc.ini<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一次启动失败 60秒重启 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">onfailure</span> <span class="attr">action</span>=<span class="string">&quot;restart&quot;</span> <span class="attr">delay</span>=<span class="string">&quot;60 sec&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第二次启动失败 120秒后重启 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">onfailure</span> <span class="attr">action</span>=<span class="string">&quot;restart&quot;</span> <span class="attr">delay</span>=<span class="string">&quot;120 sec&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logmode</span>&gt;</span>append<span class="tag">&lt;/<span class="name">logmode</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志文件目录(相对于executable配置的路径) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logpath</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">logpath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>需管理员权限 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//注册服务</span><br><span class="line">winsw.exe install</span><br><span class="line">//卸载服务</span><br><span class="line">winsw.exe uninstall</span><br><span class="line">//启动服务</span><br><span class="line">winsw.exe start</span><br><span class="line">//停止服务</span><br><span class="line">winsw.exe stop</span><br><span class="line">//重启服务</span><br><span class="line">winsw.exe restart</span><br><span class="line">//查看状态</span><br><span class="line">winsw.exe status</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>折腾</category>
        <category>实用</category>
        <category>内网穿透</category>
      </categories>
  </entry>
  <entry>
    <title>某面板插件解锁</title>
    <url>/2021/12/16/%E6%9F%90%E9%9D%A2%E6%9D%BF%E6%8F%92%E4%BB%B6%E8%A7%A3%E9%94%81/</url>
    <content><![CDATA[<h1 id="两种方法"><a href="#两种方法" class="headerlink" title="两种方法"></a>两种方法</h1><blockquote>
<p>貌似不可解锁三方</p>
<p>推荐安装插件：</p>
<ol>
<li>Nginx防火墙</li>
<li>网站监控报表</li>
</ol>
</blockquote>
<h2 id="经测试"><a href="#经测试" class="headerlink" title="经测试"></a>经测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无此文件用下方解决方法</span></span><br><span class="line"><span class="comment"># 打开目录/www/server/panel/class找到并编辑panelplugin.py文件,使用Ctrl+F搜索并找到</span></span><br><span class="line"></span><br><span class="line">softList[<span class="string">&#x27;list&#x27;</span>] = tmpList</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这段代码，在其下方添加如下代码：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 专业版破解</span></span><br><span class="line">softList[<span class="string">&#x27;pro&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> soft <span class="keyword">in</span> softList[<span class="string">&#x27;list&#x27;</span>]:</span><br><span class="line">soft[<span class="string">&#x27;endtime&#x27;</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二选一！！！</span></span><br><span class="line"><span class="comment"># 企业版破解</span></span><br><span class="line">softList[<span class="string">&#x27;ltd&#x27;</span>] = <span class="number">99999999999</span></span><br><span class="line"><span class="keyword">for</span> soft <span class="keyword">in</span> softList[<span class="string">&#x27;list&#x27;</span>]:</span><br><span class="line">soft[<span class="string">&#x27;endtime&#x27;</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/zyhwjl/images/raw/master/PicGo/Typora/typora-user-images/2021/12/16/16-02-04-692646bc4b4140014e30ef688c0b2e48-image-20211216160204436-41c27b.png"
                      alt="image-20211216160204436"
                ></p>
<h2 id="未测试"><a href="#未测试" class="headerlink" title="未测试"></a>未测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到www/server/panel/data/plugin.json</span></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="comment"># 点击搜索，查找/替换</span></span><br><span class="line"><span class="string">&quot;endtime&quot;</span>: -<span class="number">1</span></span><br><span class="line"><span class="comment"># 全部替换为</span></span><br><span class="line"><span class="string">&quot;endtime&quot;</span>: <span class="number">999999999999</span></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line"><span class="comment"># 重启面板</span></span><br></pre></td></tr></table></figure>

<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="去除宝塔面板强制登陆"><a href="#去除宝塔面板强制登陆" class="headerlink" title="去除宝塔面板强制登陆"></a>去除宝塔面板强制登陆</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除登录文件命令</span></span><br><span class="line">mv /www/server/panel/data/bind.pl ./</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名此文件为bind.pl.bak</span></span><br><span class="line">mv /www/server/panel/data/bind.pl /www/server/panel/data/bind.pl.bak</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>折腾</category>
        <category>实用</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到ZYHWJLのBLOG</title>
    <url>/2020/09/08/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0ZYHWJL%E3%81%AEBLOG/</url>
    <content><![CDATA[<center><h1>本博客仅限个人测试使用</h1></center>


<center><h1>不含任何商业性质</h1></center>


<center><h1>严格遵守中华人民共和国各项法律法规</h1></center>]]></content>
      <tags>
        <tag>首页</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云音乐-解锁灰色</title>
    <url>/2020/09/24/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90-%E8%A7%A3%E9%94%81%E7%81%B0%E8%89%B2/</url>
    <content><![CDATA[<p><a class="link"   href="https://github.com/nondanee/UnblockNeteaseMusic" >项目地址<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p><em>网易云音乐是我个人较为常用的音乐播放器，然而很多音乐网易都没有版权，例如周董。偶然发现这个项目，以此记录我的折腾记录。本人设备和精力有限，只总结出windows客户端、macOS客户端、Android客户端的使用方法。</em></p>
</blockquote>
<hr>
<h1 id="Android客户端"><a href="#Android客户端" class="headerlink" title="Android客户端"></a>Android客户端</h1><blockquote>
<p>安卓客户端的使用方法较为简单，稳定。</p>
</blockquote>
<h2 id="运行环境："><a href="#运行环境：" class="headerlink" title="运行环境："></a><strong>运行环境：</strong></h2><ol>
<li>xposed</li>
<li>Magisk–&gt;Edxposed</li>
<li>太极阳</li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a><strong>插件</strong></h2><ul>
<li>UnblockMusic Pro 2.8.2</li>
</ul>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a><strong>获取方式</strong></h2><ol>
<li><a class="link"   href="https://www.coolapk.com/" >酷安<i class="fas fa-external-link-alt"></i></a></li>
<li><del><a class="link"   href="http://pan.zyhwjl.cn/fivetbyptop/%E5%B7%A5%E5%85%B7/UnblockMusic+Pro_2.8.2.apk" >个人网盘备份<i class="fas fa-external-link-alt"></i></a></del></li>
</ol>
<h2 id="客户端版本"><a href="#客户端版本" class="headerlink" title="客户端版本"></a><strong>客户端版本</strong></h2><ol>
<li><p><strong>魅族专版最新版</strong></p>
<p> 截止7.3.10.237476可用，不清楚是否可运行于非魅族手机，不清楚以后是否可用</p>
<p> 获取方式：魅族应用商城<del>、<a class="link"   href="http://pan.zyhwjl.cn/fivetbyptop/%E5%B7%A5%E5%85%B7/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90_7.3.10.apk" >个人网盘备份<i class="fas fa-external-link-alt"></i></a></del></p>
</li>
<li><p><strong>非魅族</strong></p>
<p> 官方原版7.0.0</p>
</li>
</ol>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h2><ul>
<li>可同时安装<a class="link"   href="https://repo.xposed.info/node/1602" >网易云音乐插件<i class="fas fa-external-link-alt"></i></a>以优化使用体验。</li>
</ul>
<hr>
<h1 id="Windows客户端"><a href="#Windows客户端" class="headerlink" title="Windows客户端"></a>Windows客户端</h1><blockquote>
<p>Windows客户端的使用方法最为简单。</p>
</blockquote>
<h2 id="运行环境：-1"><a href="#运行环境：-1" class="headerlink" title="运行环境："></a><strong>运行环境：</strong></h2><ul>
<li>服务器端Unblockneteasemusic</li>
</ul>
<h2 id="获取方式-1"><a href="#获取方式-1" class="headerlink" title="获取方式"></a><strong>获取方式</strong></h2><ul>
<li>dock版<a class="link"   href="https://registry.hub.docker.com/r/nondanee/unblockneteasemusic/" >nondance-unblockneteasemusic<i class="fas fa-external-link-alt"></i></a><br>  <em>仅本人目前使用方式，并非仅此一种方式。</em></li>
</ul>
<h2 id="客户端版本-1"><a href="#客户端版本-1" class="headerlink" title="客户端版本"></a><strong>客户端版本</strong></h2><ul>
<li>官方最新版客户端，非uwp版。</li>
</ul>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a><strong>使用方式</strong></h2><p>设置-代理-地址、端口</p>
<hr>
<h1 id="MacOS客户端"><a href="#MacOS客户端" class="headerlink" title="MacOS客户端"></a>MacOS客户端</h1><blockquote>
<p><del>因Apple限制等原因，苹果系最为繁琐，本人仅探索出macOS使用方法。</del></p>
</blockquote>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a><strong>运行环境</strong></h2><p>​    本地nodejs服务</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul>
<li><p>本地安装nodejs、git</p>
<p><code>git clone https://github.com/nondanee/UnblockNeteaseMusic.git</code><br><code>cd UnblockNeteaseMusic</code></p>
</li>
<li><p>修改hosts<br>   1. 获取su权限<code>sudo su</code><br>       2. 执行 <code>vim /etc/hosts</code><br>       3. 最下方添加<br>           <code>                  127.0.0.1       music.163.com</code><br>           <code>                  127.0.0.1       interface.music.163.com</code></p>
</li>
<li><p>运行服务<br><code>node UnblockNeteaseMusic/app.js -p 80:443 -f 59.111.181.38</code><br><em>其中59.111.181.38为本地ping music.163.com获取到的IP</em></p>
</li>
</ul>
<h1 id="Apple其他设备"><a href="#Apple其他设备" class="headerlink" title="Apple其他设备"></a>Apple其他设备</h1><p>信任证书挂载代理即可，使用openwrt或老毛子可实现透明代理</p>
<p>另推荐使用<a class="link"   href="https://music.migu.cn/" >咪咕音乐<i class="fas fa-external-link-alt"></i></a>，乐库全、界面</p>
<hr>
 <center> 至此教程结束 </center>]]></content>
      <categories>
        <category>折腾</category>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>踩坑腾讯云函数(SCF)</title>
    <url>/2021/11/30/%E8%B8%A9%E5%9D%91%E8%85%BE%E8%AE%AF%E4%BA%91%E5%87%BD%E6%95%B0(SCF)/</url>
    <content><![CDATA[<blockquote>
<p><a class="link"   href="https://console.cloud.tencent.com/scf" >云函数<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h1 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h1><p>时区默认为UTC+0，如需使用北京时间，须设置环境变量<code>TZ=Asia/Shanghai</code></p>
<h1 id="云函数安装依赖"><a href="#云函数安装依赖" class="headerlink" title="云函数安装依赖"></a>云函数安装依赖</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy -t .</span><br><span class="line">//numpy替换为包名，不能省略<span class="string">&quot;.&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑</category>
        <category>腾讯云</category>
        <category>云函数</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云Cloudbase学习记录</title>
    <url>/2021/03/28/%E8%85%BE%E8%AE%AF%E4%BA%91Cloudbase%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>安装<a class="link"   href="https://nodejs.org/en/" >Node.js<i class="fas fa-external-link-alt"></i></a>，推荐LTS版本。</p>
<h1 id="安装Cloudbase"><a href="#安装Cloudbase" class="headerlink" title="安装Cloudbase"></a>安装Cloudbase</h1><pre><code>npm install -g @cloudbase/cli
</code></pre>
<p>国内由于你懂的原因速度较慢，推荐换源后安装。</p>
<pre><code>npm config set registry https://r.cnpmjs.org/
</code></pre>
<p>安装结束后以<code>cloudbase --version</code>–<code>tcb --version</code>查看是否成功。</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre><code>tcb login                                 #登录
tcb logout                                #登出
tcb hosting detail                        #静态网站托管状态
tcb hosting deploy localpath cloudpath    #静态网站托管部署
tcb hosting delete cloudpath              #静态网站托管删除
-e                                        #指定环境id
</code></pre>
<h1 id="特别的"><a href="#特别的" class="headerlink" title="特别的"></a>特别的</h1><p>cloudbaserc.json所在目录下无需-e命令，</p>
<blockquote>
<p>未识别到有效的环境 Id，请使用 cloudbaserc 配置文件进行操作或通过 -e 参数指定环境 Id</p>
</blockquote>
<p>该错误可由此解决。</p>
<hr>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a class="link"   href="https://www.dazhuanlan.com/2020/03/11/5e6802809511c/" >CloudBase CLI<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>折腾</category>
        <category>云开发</category>
        <category>腾讯云</category>
      </categories>
      <tags>
        <tag>云开发</tag>
      </tags>
  </entry>
  <entry>
    <title>远程桌面添加SSL</title>
    <url>/2020/12/18/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%B7%BB%E5%8A%A0ssl-windows-win10-RDS-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2-SSL/</url>
    <content><![CDATA[<p>ssl是数字证书的一种，简而言之是为了验证客户端与服务器的连接是否安全。启用ssl后，所有数据将通过加密协议传输，避免明文传输密码而带来的风险。</p>
<h2 id="申请ssl证书"><a href="#申请ssl证书" class="headerlink" title="申请ssl证书"></a>申请ssl证书</h2><p>本部分不多赘述，网上有大量教程。不过值得一提的是，不同的客户端对不同的颁发机构信任不一。另外如果需要泛域名证书一般需要进行企业认证、付费等，或通过<a class="link"   href="https://letsencrypt.org/" >Let’s Encrypt<i class="fas fa-external-link-alt"></i></a>免费申请，但由于相关原因部分客户端不信任该颁发机构，请自行斟酌。</p>
<h2 id="添加ssl证书"><a href="#添加ssl证书" class="headerlink" title="添加ssl证书"></a>添加ssl证书</h2><p>本教程理论适用于windows所有操作系统，本人使用win10 20H2测试可用。–2020.12.18<br>使用mmc（命令行运行）,然后文件-&gt;添加&#x2F;删除管理单元-&gt;证书-&gt;<strong>计算机账户</strong>-&gt;本地计算机(运行此XXXXX)，然后在左侧控制台节点的证书-&gt;个人下，右键单击右侧空白-&gt;所有任务-&gt;导入，然后按提示选择刚才的.p12<code>另见补充说明</code>文件，并输入正确的密码。</p>
<h2 id="为RDS指定证书"><a href="#为RDS指定证书" class="headerlink" title="为RDS指定证书"></a>为RDS指定证书</h2><p>注册表<code>regedit(CMD)</code>路径为 <code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp</code><br>加入如下项<br><code>Value name: SSLCertificateSHA1Hash</code><br><code>Value type: REG_BINARY（二进制值）</code><br><code>Value data:&lt;certificate thumbprint&gt;（证书指纹）</code><br>其中Value data为可以在刚才加入的证书窗口查到的颁发下来的SSL证书的sha1指纹（20个16进制数），这里貌似不能直接复制粘贴，手动敲一遍也还好，反正不多，注意别抄错就好。</p>
<h2 id="为证书配置权限"><a href="#为证书配置权限" class="headerlink" title="为证书配置权限"></a>为证书配置权限</h2><p>在刚才的mmc控制台，选中你的证书右键-&gt;所有任务-&gt;管理私钥，弹出的窗口和NTFS的权限管理窗口类似，在权限对话框中选添加，用户名直接输入 NETWORK SERVICE 并检查，通过后确定添加，然后保证权限中的读取为挑勾选中状态即可。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果证书过期或其它原因导致需要替换新的证书时，需要在重新导入证书，设置私钥访问权限设置新的fingerprint后，重启系统才能生效。</p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h2><p><a class="link"   href="https://blog.k-res.net/archives/1893.html" >使用StartSSL(Let’s Encrypt)的免费SSL证书为Windows远程桌面RDS服务指定受信任的证书<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="http://teenteam.biz/teenteam/blog/?p=11/" >SSL certificates with StartSSL, Microsoft IIS, Microsoft RDP and OpenSSL <i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://support.microsoft.com/en-us/kb/2001849" >How to Force Remote Desktop Services on Windows 7 to Use a Custom Server Authentication Certificate for TLS<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h2><p>某些证书颁发者未使用默认的.p12文件，但一般会颁发证书加私钥的形式，若没有私钥，如crt格式，则无法配置权限。如某讯云格式则需导入pfx后输入txt中的私钥。</p>
<p>另外，经此方法配置加密传输后，在较低版本的RD客户端不信任远程电脑。实测Window 7及以上无此问题。</p>
]]></content>
      <categories>
        <category>折腾</category>
        <category>实用</category>
      </categories>
  </entry>
  <entry>
    <title>黑苹果-LENOVO RUI 7000</title>
    <url>/2021/04/19/%E9%BB%91%E8%8B%B9%E6%9E%9C-LENOVO%20RUI%207000/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>黑苹果</category>
        <category>咕咕</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果三码注入教程</title>
    <url>/2020/09/24/%E9%BB%91%E8%8B%B9%E6%9E%9C-%E4%B8%89%E7%A0%81%E6%B3%A8%E5%85%A5%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>黑苹果</category>
        <category>咕咕</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
      </tags>
  </entry>
</search>
